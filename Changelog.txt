06-Sep-2019 ======== Version 2.0.0 beta 3 Release ========

04-Sep-2019 Fixes #656. Generated .vcxprojs were missing filters for source files.

04-Sep-2019 Fixes #654. Cannot use macros in 'ClCompile Include="path"' style .vcxproj elements, as it's not guaranteed to work. See https://docs.microsoft.com/en-us/cpp/build/reference/vcxproj-file-structure?view=vs-2015.

04-Sep-2019 Fixes #655. Fixed regression that specifying a package version on the command line that did not match any package versions in the definition file was silently ignored. If there are no packages of that name in the definition file, this is only a warning, otherwise, it is an error.

01-Sep-2019 Fixes #650. Updated the following Nugets:
* Microsoft.Extensions.Configuration.EnvironmentVariables to 2.2.4
* SharpCompress to 0.24.0
* vswhere to 2.7.1
* Microsoft.NET.Test.Sdk to 16.2.0
* NUnit to 3.12.0
* NUnit3TestAdapter to 3.15.1

01-Sep-2019 Fixes #651. Updated continuous integration from Xcode 10.2 to 10.3 (Travis-CI)

31-Aug-2019 Fixes #652. Added --dry-run/-n option to Python test harness, to stop after the BAM step. This is only really useful for project generation modes, to validate master package assembly generation, and running the build. Native build mode will always compile the code.

31-Aug-2019 Fixes #612. Removed public accessor from classes in the standard packages folder. Since package scripts get accumulated into a single assembly at build time, the default accessor (internal) suffices. This does mean that end-user packages should no longer use public accessors on Module derivations, and just leave the default.

29-Aug-2019 Fixes #589. Sealed classes that are not expected to be derived from.

29-Aug-2019 Fixes #641. BREAKING CHANGE. Replaced ReadOnlyCollections with generic IEnumerable where possible (avoids allocating a new object). The following public APIs have changed:
 - Bam.Core.Graph.EncapsulatingModules
 - Bam.Core.Module.Dependents
 - Bam.Core.Module.Dependees
 - Bam.Core.Module.Requirements
 - Bam.Core.Module.Requirees
 - Bam.Core.Module.Children
 - C.CModule.FlattenHierarchicalFileList (protected)
 - C.CModule.OrderLibrariesWithDecreasingDependencies (protected)
 - C.CModuleContainer.Children
 - C.IForwardedLibraries.ForwardedLibraries
 - C.DynamicLibrary.Source
 - XcodeBuilder.Project.GetTargetList function repurposed as TargetList property.

29-Aug-2019 Fixes #649. Reduced overhead of checking the Bam.Core.MacroList through the Dict property (no allocations now).

29-Aug-2019 Fixes #597. BREAKING CHANGE. Deprecated classes and functions that generate a *Container in favour of *Collection. This seems to be the more C# way.
Classes renamed:
* C.CCompilableModuleContainer -> C.CCompilableModuleCollection
* C.CModuleContainer -> C.CModuleCollection

Functions renamed:
* C.CModule.InternalCreateContainer -> C.CModule.InternalCreateCollection
* C.CModule.CreateHeaderContainer -> C.CModule.CreateHeaderCollection
* C.ConsoleApplication.CreateAssemblerSourceContainer -> C.ConsoleApplication.CreateAssemblerSourceCollection
* C.ConsoleApplication.CreateCSourceContainer -> C.ConsoleApplication.CreateCSourceCollection
* C.ConsoleApplication.CreateObjectiveCSourceContainer -> C.ConsoleApplication.CreateObjectiveCSourceCollection
* C.ConsoleApplication.CreateWinResourceContainer -> C.Configuration.CreateWinResourceCollection
* C.CxxConsoleApplication.CreateCxxSourceContainer -> C.CxxConsoleApplication.CreateCxxSourceCollection
* C.CxxConsoleApplication.CreateObjectiveCxxSourceContainer -> C.CxxConsoleApplication.CreateObjectiveCxxSourceCollection
* C.CxxDynamicLibrary.CreateCSourceContainer -> C.CxxDynamicLibrary.CreateCSourceCollection
* C.CxxDynamicLibrary.CreateCxxSourceContainer -> C.CxxDynamicLibrary.CreateCxxSourceCollection
* C.CxxGUIApplication.CreateCSourceContainer -> C.CxxGUIApplication.CreateCSourceCollection
* C.CxxGUIApplication.CreateCxxSourceContainer -> C.CxxGUIApplication.CreateCxxSourceCollection
* C.DynamicLibrary.CreateCSourceContainer -> C.DynamicLibrary.CreateCSourceCollection
* C.DynamicLibrary.CreateAssemblerSourceContainer -> C.DynamicLibrary.CreateAssemblerSourceCollection
* C.GUIApplication.CreateCSourceContainer -> C.GUIApplication.CreateCSourceCollection
* C.StaticLibrary.CreateAssemblerSourceContainer -> C.StaticLibrary.CreateAssemblerSourceCollection
* C.StaticLibrary.CreateCSourceContainer -> C.StaticLibrary.CreateCSourceCollection
* C.StaticLibrary.CreateCxxSourceContainer -> C.StaticLibrary.CreateCxxSourceCollection
* C.StaticLibrary.CreateObjectiveCSourceContainer -> C.StaticLibrary.CreateObjectiveCSourceCollection
* C.StaticLibrary.CreateObjectiveCxxSourceContainer -> C.StaticLibrary.CreateObjectiveCxxSourceContainer

28-Aug-2019 Fixes #378. Fixed regression in being able to generate Xcode projects on non-macOS platforms.

27-Aug-2019 Fixes #623. Publisher.InstallNameModule now implements a common ExecuteInternal override, rather than it being duplicated in each derived Module. Also, fixed the MakeFile implementation to actually call install_name_tool.

27-Aug-2019 Fixes #605. VisualStudio projects are associated by module type, while VS project configurations are associated to a module. Reinforced this by changing VSSolution.EnsureProjectExists to take the module type (and build environment, needed for additional data) instead of the module itself. Assigning the VSProject to a Module's MetaData property is now the responsibility of VSProject.GetConfiguration.
As an aside, different working directories per configuration (i.e. per module) can now be used.

25-Aug-2019 Fixes #611. VisualStudioProcessor attributes that were ambiguous have been renamed or removed.

25-Aug-2019 Fixes #608. Removed isPath optional argument to VSSettingsGroup.AddSetting overload for paths, as all uses were referring to paths (rather than just generic strings).

25-Aug-2019 Fixes #607. Changed the default value of the separator argument to VSSetting from null to the empty string, to avoid some logic in the code.

25-Aug-2019 Fixes #609. Renamed VSSolutionBuilder.VSSolutionFolder.appendNestedEntity to AppendNestedEntity for consistency.

25-Aug-2019 Fixes #606. Removed an unused VSProjectConfiguration argument from the following functions:
* VisualStudioBuilder.VSProject.AddHeader
* VisualStudioBuilder.VSProject.AddSource
* VisualStudioBuilder.VSProject.AddOtherFile
* VisualStudioBuilder.VSProject.AddResourceFile
* VisualStudioBuilder.VSProject.AddAssembyFile
* VisualStudioBuilder.VSProjectFilter.AddFile

25-Aug-2019 Fixes #604. VisualStudioBuilder.VSProject.GetUniqueSettingsGroup and VisualStudioBuilder.VSProjectConfiguration.GetSettingsGroup refactor. No longer accept optional arguments. 'include' argument renamed to 'path' to be less ambiguous, since it is a setting related to a path in the project file (e.g. settings specific to a source file). A null path means a setting shared across all files. The 'uniqueToProject' argument to GetSettingsGroup is removed, since the path being non-null implies a unique settings group.

25-Aug-2019 Fixes #598. Split C.WinResourceCollection into a separate source file.

25-Aug-2019 Fixes #596. Moved initialisers in C.ExternalSourceGenerator's default constructor into automatic property initialisers.

25-Aug-2019 Fixes #595. C.DefaultToolchain private fields are now readonly.

25-Aug-2019 Fixes #593. Made C.CModule's default constructor protected, and added documentation to explain why a Module constructor is needed in this case.

25-Aug-2019 Fixes #592. C.IToolchainDiscovery.discover renamed to Discover for consistency.

25-Aug-2019 Fixes #586. WindowsSDK.WinResourceCompilerBase.configure renamed to Configure for consistency.

25-Aug-2019 Fixes #583. XcodeBuilder.ConfigurationValue.Merge no longer accepts a key argument. This was only used for failure logging, which is now moved to the call point.

25-Aug-2019 Fixes #578. Clarified use of the second key-value pair for XcodeProjectProcessor.UniqueEnumAttribute.

24-Aug-2019 Fixes #646. Removed unnecessary use of Attribute at the end of some XYZAttribute markup.

24-Aug-2019 Fixes #576. XcodeProjectProcessor.XcodeConversion.Convert no longer has a required real_settings_type argument. Instead, there is an optional settingsTypeOverride. This is because the use case for a different Settings type is the exception rather than the rule.

24-Aug-2019 Fixes #584. BREAKING CHANGE. Removed the Bam.Core.Module argument from the extension method Defaults for each settings interface. If the Module is needed, then the Module property on the Settings itself can be queried.

23-Aug-2019 Fixes #648. Python test harness VSSolution runs now use msbuild at quiet verbosity instead of normal, to reduce build spam.

22-Aug-2019 Fixes #645. BREAKING CHANGE. Initialisation of Settings interface properties simplified. Settings classes only require a default constructor now. Removed InitializeAllInterfaces method. Added SetModuleAndDefaultPropertyValues and AssignModule methods to Base.Core.Settings.
Interfaces that can be delta'd (e.g. compiler interfaces used in project generator build modes) no longer require an Empty extension method. Instead, Defaults and Clone extension methods are responsible for initialising any reference properties before use.

20-Aug-2019 Fixes #585. BREAKING CHANGE. Removed virtual function Bam.Core.Settings.AssignFileLayout() has been removed. The property FileLayout has been renamed to CommandLayout, and the setter made private. Bam.Core.Settings constructor now requires an ELayout value. This enforces the invariant nature of the layout, and eliminates one (virtual) function call per Settings instance.

20-Aug-2019 Fixes #644. Added missing toolchain versions for Xcode 11 and VisualStudio 2019.

19-Aug-2019 Fixes #625. BREAKING CHANGE. Bam.Core.Module.InputModules renamed to InputModulePaths, and the KeyValuePair argument replaced with a (Bam.Core.Module module, string pathKey) tuple to simplify the API. Added Bam.Core.UnspecifiedInputModulePathException to be thrown when a suitable override for InputModulePaths has not been provided in a derivation of Module.

18-Aug-2019 Fixes #643. Added --keepgoing (default = False) command line option to the Python test harness. This changes the default behaviour to run through all tests and then report a summary. By default, it now aborts when the first error is encountered. This should allow continuous integration to report systemic errors much faster.

16-Aug-2019 Fixes #642. Additional exception messages regarding which Module failed to build are now included by default.

16-Aug-2019 Fixes #633. Removed the deprecated GccCommon.ConfigureUtilities.

15-Aug-2019 Fixes #619. BREAKING CHANGE. Removed Bam.Core.ITool.CreateDefaultSettings<T>(Module) with the getter property Bam.Core.ITool.SettingsType. This simplifies package code, and centralises the Settings object construction.

15-Aug-2019 Fixes #620. Bam.Core.PreBuiltTool has now sealed the EvaluateInternal and ExecuteInternal methods. Subclasses do not need to do anything special here.

15-Aug-2019 Fixes #622. Split PreExisting* classes into separate source files in Publisher.

15-Aug-2019 Fixes #629. Removed unused field from GccCommon.AssemblerBase.

15-Aug-2019 Fixes #627. Split Installer enums into different source files for consistency.

15-Aug-2019 Fixes #639. Added Bam.Core.GraphMacroNames, Bam.Core.ModuleMacroNames, C.ModuleMacroNames static classes with string constants for many of the keys used in the macro lookups.

14-Aug-2019 Fixes #587. BREAKING CHANGE. No longer need to pass a parent Module to Module.Init().
This change affects every Module class. The use of the parent Module is the exception rather than the rule, and there are alternative methods to get the information if it is needed.
Added Bam.Core.Graph.ModuleStack property in order to peek at the hierarchy of parent Modules. This can be done in Init() calls.
Removed Bam.Core.Module.GetEncapsulatingReferencedModule. Access to the encapsulating Module is now through the readonly Module.EncapsulatingModule property.
The encapsulating Module is now calculated after the Module preInitCallback but before Init().
The following Module macros are no longer available:
* parentmodulename
* encapsulatedparentmodulename
* encapsulatingmodulename
* encapsulatingbuilddir
They can be obtained via the actual Modules accessed by the new properties.

12-Aug-2019 Fixes #638. Debugging package project files no longer allows multiple package versions to appear in the internal package list.

12-Aug-2019 ======== Version 2.0.0 beta 2 Release ========

11-Aug-2019 Fixes #635. Moved MetaData indexers and Contains functions for VisualC and WindowsSDK into their respective Common packages.

11-Aug-2019 Fixes #632. Using Doxygen WARN_AS_ERROR to fail documentation builds if incorrect or missing.

11-Aug-2019 Fixes #579. Fixes #580. Fixes #581. Fixes #575. Fixes #582. Fixes #588. Fixes #600. Fixes #601. Fixes #602. Fixes #615. Fixes #616. Fixes #617. Fixes #618. Fixes #599. Fixes #630. Fixes #631. Fixes #634. Fixes #628. Added documentation to the default packages.

10-Aug-2019 Fixes #635. Moved public indexer and Contains function of per VisualC-version MetaData class into the base class in VisualCCommon MetaData. Moved MetaData implementation from WindowsSDK versions to WindowsSDKCommon.

10-Aug-2019 Fixes #636. VisualStudio 2019 vcvarsall.bat can cause a dialog to open to invoke powershell to send telemetry. This can cause non-interactive continuous integration to halt indefinitely, so set VSCMD_SKIP_SENDTELEMETRY while invoking vcvarsall.bat to avoid it.

08-Aug-2019 Fixes #613. Added command line option --includeallversions, which modifies the behaviour of -p/--createdebugproject, to include all package versions. This project will not compile to an assembly, due to duplicate symbols, but is source browseable.

15-Jul-2019 ======== Version 2.0.0 beta 1 Release ========

14-Jul-2019 Fixes #574. The default package repository no longer appears twice if running integration tests.
Added Bam.Core.IOWrapper.PathsAreEqual, which takes into account that Windows APIs may return paths with differing cases on the drive letters.

14-Jul-2019 Fixes #572. Cleaned up the output of --showdefinition, after it was changed in alpha 4.

13-Jul-2019 Fixes #534. Added --setdependentdefaultversion option to bam. Requires the --pkgname and --pkgversion options. This change the default version of the named package in the master package.
Updated tests to use the following default toolchains:
- Clang-Xcode10 (minimum version in Mojave)
- Gcc-7         (assuming default Ubuntu 18.04 LTS compiler; can be installed on CentOS7 with http://blog.stevedoria.net/20180214/how-to-install-gcc-7-on-centos-7)
- VisualC-15.0  (VisualStudio 2017 as a stable version, since 2019 has only recently been released)

12-Jul-2019 Fixes #573. Remove extra test harness logging statement, which made it look like Xcode schemes were built in duplication.

12-Jul-2019 Fixes #571. Added Clang-Xcode11 package. This currently corresponds to the Xcode11 beta 3 package, but will hopefully be compatible with RTM.

11-Jul-2019 Fixes #397. Added CocoaTest2 test package, that exercises putting resource files into a macOS application bundle, and the code then loads them using Cocoa APIs.

09-Jul-2019 Fixes #568. Test harness can now run the same test with multiple options.
This can be useful, if a test package can be applied to different versions of a specific package.

09-Jul-2019 Fixes #437. Fixes #496. Adding test to exercise the 'tests' namespace and Publisher's IncludeAllModulesInNamespace.
- Added new test NonPackageNamespaceTest1
- Extended test harness to be able to pass extra arguments to each package, in the case above, passing '--tests' in order to look into the 'tests' namespace for top-level Modules.

09-Jul-2019 Fixes #567. Added common boilerplate code as extension methods:
- SetVisualCWarningLevel
- SetClangWarningOptions
- SetGccWarningOptions
- SetMingwWarningOptions
- FindSharedObjectsNextToExecutable
- GccExportAllSymbols
- ClangExportAllSymbols
- MingwExportAllSymbols
To use, add 'using <Toolchain>Common.Helpers;' to the top of your BAM script.

06-Jul-2019 Fixes #521. Only specifying a major version in SetSemanticVersion is now supported. Particularly on Linux. A shared object symbolic link is no longer written in these circumstances. SetSemanticVersion must be called before base.Init for this to work correctly, or an exception will be thrown.

06-Jul-2019 Fixes #522. C.PreprocessedFile now performs evaluation similar to an object file, such as a newer source file, and if there are any header includes that are newer.

06-Jul-2019 Fixes #566. Added setting VisualCCommon.ICommonPreprocessorSettings.NoLogo (bool, defaults to true) to the VisualC preprocessor tool.

06-Jul-2019 Fixes #194. A TokenizedString with incorrect token formatting, e.g. $token), $(token, will throw TokenizedString.BadTokenFormatException. Added unit tests. Note that $token does not throw an exception, as this might be an intended string, e.g. $ORIGIN.

06-Jul-2019 Fixes #480. An empty TokenizedString, i.e. $(), will now throw TokenizedString.EmptyTokenException. Added unit test.

05-Jul-2019 Fixes #74. Reopened. _CONSOLE no longer appears in C++ console applications on non-Windows platforms. (It had been fixed for C applications previously.)

05-Jul-2019 Fixes #431. Using System.Environment.SpecialFolder.ProgramFiles instead of fetching environment variables.

05-Jul-2019 ======== Version 2.0.0 alpha 4 Release ========

04-Jul-2019 Fixes #563. BAM assembly compilation now uses 'dotnet build' rather than 'dotnet publish --runtime [portableRID]'.

04-Jul-2019 Fixes #564. BAM schema now uses 'xs:anyURI' for the type of the path attribute for package Source.

03-Jul-2019 Fixes #173. Packages that reside in the same folder are now discoverable without any PackageRepository element in the definition file.

03-Jul-2019 Fixes #350. Addressed various shortcomings of the package repository concept.
- Added Bam.Core.Graph.AddPackageRepository(<path>) and Bam.Core.Graph.PackageRepositories (enumerator of paths).
- Added Bam.Core.Graph.SkipPackageSourceDownloads property (defaults to false) to allow skipping package source downloads. Useful in some modes of operation.
- Added Bam.Core.PackageRepository class. This formalises the repository. Repositories can be structured (has a packages subdirectory and optional tests subdirectory), or just a flat list of packages. A structured repository always has its packages folder searched. The tests folder, if it exists, is only searched if the master package is in it.
- Added Bam.Core.PackageTreeNode. This is used internally to create a hierarchy of package dependencies, which massively simplifies determining package dependencies, and then filtering based on default versions or command line overrides of versions.
- Updated BAM Schema so that PackageRepositories now acccept a child element of type NamedRepo with attribute name. Named repositories are a list of directory names which represent package repositories. These are searched for on a new configuration option, 'Repository:SearchDirs'.
- Changed the meaning of XML schema 'Repo' element. Previously the 'dir' attribute could be relative, but was ambiguous where it was relative from. The dir attribute can now start with $(packagedir), as in TokenizedStrings, to be relative to the package directory. Absolute paths are also accepted. Named repositories are considered more elegant for structured repositories from external sources, while unnamed are for specifying search paths within a directory structure of a source tree.
- Bam.Core.PackageDefinition now has a Repo property and NamedPackageRepositories property.

21-Jun-2019 Fixes #562. NMake does not support order only dependencies, so they must be added as regular dependencies, or targets may be made in the incorrect order. If they are not to be used in rule shell commands, they need filtering out.

16-Jun-2019 Fixes #560. Added VisualC.MetaData.RuntimeLibrary property, used to initialise the compiler setting. This can be overridden with a Bam.Core.IPackageMetaDataConfigure subclass. Also a command line switch, --VisualC.runtime, is also provided, accepting either MD, MDd, MT, MTd, the usual designations for the runtime library.

14-Jun-2019 Fixes #559. Added Version read-only property of C.LinkerTool, C.LibrarianTool and C.AssemblerTool, identical to the C.CompilerTool property.

13-Jun-2019 Fixes #108. Reopened. If a package resides in /private/tmp on macOS, an Xcode project will be generated with paths with /private/tmp, but Xcode treats these as /tmp (a symlink to /private/tmp). This causes problems for excluded source files (paths don't match, by string comparison), and some operations in Xcode 10 such as shell script build phases that have output files, such as generated source files, again as paths not matching. Generated Xcode projects are now post-processed to replace /private/tmp with /tmp.

11-Jun-2019 Fixes #558. Xcode project generation now uses the correct file type for source files. Also, mixed language projects (e.g. C++ and ObjectiveC++) no longer need to specify the target compilation language per source file (since it's encoded in the file type).

09-Jun-2019 Fixes #557. VisualStudio compiler version determination doesn't need native 64-bit support; 32-bit will suffice, and is available for all versions of VS.

09-Jun-2019 Fixes #556. Link time code generation (LTCG) was introduced in VisualStudio 2015, so make sure it's not enabled for older VisualStudio versions.

09-Jun-2019 Fixes #555. Added Gcc-6 package, and included it in tests.

08-Jun-2019 Fixes #554. All versions of vcruntime140*.dll and msvcp140*.dll are now included in redists. There are _1 and _2 suffixed versions which offer additional standard library support features.

08-Jun-2019 Fixes #549. VisualStudio 2017 & 2019 CRT version numbers for redist are now generated from the VCToolsVersion environment variable, e.g. 14.16.27023 -> 141, 14.21.27702 -> 142.

08-Jun-2019 Fixes #553. Added Gcc-9 package, and included it in tests.

08-Jun-2019 Fixes #552. Added Gcc-8 package, and included it in tests.

08-Jun-2019 Fixes #551. msbuild, Make and xcodebuild now use the number of available cores to run in the test harness.

07-Jun-2019 Fixes #550. MakeFile generation was throwing an exception if an input module depenency didn't have correctly generated path keys for its own built files (that are dependents).

05-Jun-2019 Fixes #548. Test harness now has a -T (--excludetest) option for removing a test of the given package name from the test run. This option can be repeated many times.
Test harness internals have been given an overhaul, so that instances of tests are gathered up front, filtered easily, and then each run in turn. Reporting now gives more semantics in the log on each test instance.

03-Jun-2019 Fixes #546. Xcode projects with non-C modules were not adding target dependencies (order only dependencies).

02-Jun-2019 Fixes #544. Format update to the procedurally generated main.cs for debug projects for packages.

02-Jun-2019 Fixes #545. MakeFile variables that map to the same path don't need to create aliases, since any variable replacement in recipes will just use the original variable. This removes an exception that was thrown in these circumstances.

01-Jun-2019 Fixes #543. Xcode 10 projects forcible disable header maps, as they confuse matters in multi-configuration projects. This was already disabled pre-Xcode 10.

01-Jun-2019 Fixes #542. VisualStudio project generation now guards against null reference exceptions when comparing conditions for settings. Mergable VisualStudio settings are now possible, in order to support both system and user include paths in a project.

31-May-2019 Fixes #540. C.ProceduralHeaderFile and C.ProceduralHeaderFileFromToolOutput both have a new virtual Boolean property, UseSystemIncludeSearchPaths, defaulting to false. In Modules deriving from these classes, set this to true in order to override the default behaviour and add directories to system includes search paths.

31-May-2019 Fixes #539. C.SuppressWarningsDelegate now allows specification of a C.EBitDepth parameter to limit suppressions to 32- or 64-bit builds only.

29-May-2019 Fixes #538. Added option --dumpprojects to the Python test harness, to dump generated project files to the log for inspection.

29-May-2019 Fixes #537. Xcode 10 builds did not work when package sources were downloaded, due to the source files residing in a different location to the package directory.

24-May-2019 Fixes #536. Xcode runs of the Python test harness did not work when specifying relative paths to package repositories.

14-Apr-2019 Fixes #78. Added Link Time Code Generation support.
Added VisualCCommon.ICommonCompilerSettings.WholeProgramOptimization (bool, default=false), VisualCCommon.ICommonLinkerSettings.LinkTimeCodeGeneration (type ELinkTimeCodeGeneration, default=Off), and VisualCCommon.ICommonArchiverSettings.LinkTimeCodeGeneration (bool, default=false).
There is no automating enabling of LTCG through BAM configurations.
There is no PGO support yet.

14-Apr-2019 Fixes #343. Added command line option, --toplevelmodule=<name>, which can be used to specify a Module class that wasn't sealed as the top-level Module to build.

14-Apr-2019 Fixes #387. Builds containing multiple Bam.Core.ISitePolicy implementations will choose that policy from the master policy. If it does not exist, then the previous behaviour of throwing an exception is used. This allows individual packages to define their site policies, say, in the tests namespace for particular requirements, and still have dependents also with site policies.

14-Apr-2019 Fixes #453. Added Bam.Core.IValidateCommandLineArgumentValue, and used it to prohibit hyphens appearing in new package names (which would be confused internally with a versioned package).

14-Apr-2019 Fixes #533. The debug project entry point, main.cs, is no longer overwritten if it exists previously. This honours any edits made to it previously. Please remove the file from disk if a fresh version is needed.

14-Apr-2019 Fixes #472. Debug project files for packages now also inherit the command line arguments used to create them. This avoids any ambiguity between running from the command line or debugging in an IDE.

14-Apr-2019 Fixes #477. Added command line option, --mpd=<directory>, to set the master package directory. This overrides the current working directory as BAM's choice of where the master package resides.

13-Apr-2019 Fixes #532. Modules using the Bam.Core.ModulePackageDirectoryRedirect attribute, and inheriting from a Module in a Package that has downloadable source archives, now correctly forward the correct paths to package files from the extracted archives.

13-Apr-2019 Fixes #479. Zip module has been moved from Publisher to Installer package, to be in a consistent location with tar.

11-Apr-2019 Fixes #529. 7Zip, InnoSetup and NSIS, used from the Publisher and Installer packages, respectively, now install via NuGets, rather than assuming the user has installed them.

Bam.Core has two new utilities:
- NuGetInfo, a class wrapping a NuGet local package, to extract meta data from
- NuGetUtilities, a static utility class that offers common patterns for NuGet usage from BAM packages.

07-Apr-2019 ======== Version 2.0.0 alpha 3 Release ========

06-Apr-2019 Fixes #527. Added VisualStudio 2019 support.
- Added package VisualC-16 (note, no .0 suffix now, since it is intended to support all minor releases)
- AppVeyor CI updated to test against the latest VisualStudio 2019 support they provide
- Add new command line option, --VisualC.discoverprereleases, which allows vswhere to inspect prerelease editions too.
- Updated vswhere NuGet to version 2.6.7.
- Updated tests package definitions to include VisualC-16.
- Various fixes to scripts to support VisualStudio 2019.

03-Apr-2019 Fixes #526. Downloading and extracting package source archives now requires that a Module from the Package has been used in the build. This means that there may be packages with source archives that don't get downloaded on some platforms.

09-Mar-2019 Fixes #525. Resolving a package, when there is both an unversioned and (many) versioned candidates no longer fails with a null dereference. I believe this is a rare situation - usually all candidates for a package will be versioned when there is more than one.

09-Mar-2019 Fixes #524. Upgraded NuGet dependencies:
 GitInfo from 2.0.15 to 2.0.20
 Microsoft.NET.Test.Sdk from 15.8.0 to 16.0.1
 NUnit from 3.10.1 to 3.11.0
 NUnit3TestAdapter from 3.10.0 to 3.13.0
 Microsoft.Extensions.Configuration.EnvironmentVariables from 2.1.1 to 2.2.0
 Microsoft.Extensions.Configuration.Ini from 2.1.1 to 2.2.0
 SharpCompress from 0.22 to 0.23

 With the upgrade to the latest SharpCompress, the handrolled tar symlink support in BAM Core has been deleted. All tar extraction operations now go through SharpCompress.

08-Mar-2019 Fixes #523. Exceptions thrown during package archive download or extraction are now propagated to the calling application.

16-Jan-2019 Updated copyright notices to 2019.

31-Dec-2018 ======== Version 2.0.0 alpha 2 Release ========

29-Dec-2018 Fixes #519. BREAKING CHANGE. Split out preprocessor settings from compiler.
In order to better support standalone preprocessor invocations, the preprocessor has been split out from the compiler into a separate settings interface, C.ICommonPreprocessorSettings. Compilers still implement this, but a new tool C.PreprocessorTool also implements this on each toolchain.
This will break a great number of settings patches, that use the PreprocessorDefinition and IncludePath properties, since the interface will need to change.
Added a new test, PreprocessFile1, in order to exercise the preprocessor.

22-Dec-2018 Fixes #518. Added ClangCommon.ICommonLinkerSettings.ExportedSymbolList to provide a path to a list of symbols to export from a dynamic library.

29-Nov-2018 Added XcodeBuilder.FileReference.EFileType.GLSLShaderSource.

28-Nov-2018 Fixes #516. Added TokenizedString function @extension(path), that returns the extension of the file path, without a leading period.

26-Nov-2018 Fixes #491. Provided a more useful error message when no toolchain packages for the current platform were included in the build, and yet a tool was requested.

24-Nov-2018 Fixes #514. Adding quotes around any string value on the command line that contains an equals sign, and has the long form of the command switch ending with an equals sign. This fixes MakeFile tar transforms that contain 'flags='.

23-Nov-2018 Fixes #515. bam --showdefinition did not show source archive URLs.

22-Nov-2018 ======== Version 2.0.0 alpha 1 Release ========

16-Nov-2018 Fixes #502. WindowsSDK 10.0.17763 and above now have redists in a UCRT versioned folder.
To support this, a new TokenizedString function has been added: @exists(path,fallback). If path exists, use it, otherwise use fallback.

16-Nov-2018 Fixes #488. Fixed regression that prebuilt libraries with headers were no longer appearing in VisualStudio solutions.

16-Nov-2018 Fixes #493. Renamed package Gcc-5.4 to Gcc-5, as it can represent any of the minor versions.

16-Nov-2018 Fixes #494. Detecting a VisualC version that is not installed now gives a sensible exception message.

16-Nov-2018 Fixes #510. Adding 3rdPartyLicenses.md to the distributable, and also mentioned in the bam preamble.

15-Nov-2018 Fixes #512. Added C.Cxx.ELanguageStandard.Cxx17 and C.Cxx.ELanguageStandard.GnuCxx17. Added Cxx17Test1 test case.

15-Nov-2018 Fixes #511. Adding Cxx14Test1 test case.

15-Nov-2018 Fixes #507. Code cleanup using features of newer C# language specifications.

15-Nov-2018 Fixes #159. Added support for packages to specify where to download archives containing their source.
In package definition files, you may now specify one or more Source elements to download. Zip, tar and gzipped tar files are supported over http.
Upon downloading and extracting these, packages have their $(packagedir) token automatically redirected to the download location.
Package sources are downloaded to a central location. This defaults to a .bam.package.sources folder in your home directory, but may be overridden by specifying a
buildamation.ini in your home directory, containing
[Packages]
SourceDir=<path>
or by specifying an environment variable BAMPackages__SourceDir=<path>.
Extracted package source is MD5 hashed after initial extraction and saved beside the archive file. On subsequent build runs, the hash is not recalculated, since it can be expensive.
In order to do a hash comparison, pass --validatesources to the bam command line. This will be slow.
The Nuget SharpCompress is used to perform most of the archive decompression, except for tar files, since there is hand rolled code to cope with symbolic links.

04-Nov-2018 Fixes #506. Added TokenizedString function, @tounix(<path>), that converts Windows style directory separators to Unix.

04-Nov-2018 Fixes #505. Added PreambleComment virtual property to C.ProceduralHeaderFile, in order to control the comment added to the top of generated headers. Set to null to exclude it.

04-Nov-2018 Fixes #504. Added macros to Bam.Core.Graph of the form <name>.packagename, where <name> is a package name. This allows expanding to a named package's directory when outside of that package's modules.

28-Oct-2018 Added TokenizedString function, @isrelative(path,fallback), which uses path if path is a relative path, and fallback if path is absolute. Useful when dealing with relative paths that cross drives on Windows.

27-Oct-2018 Fixes #499. BREAKING CHANGE. Making comparisons against toolchain versions clearer.
C.CompilerTool no longer implements Bam.Core.ISemanticVersion, instead it offsets a property returning a C.ToolchainVersion. This class offers functionality of Match, AtLeast, AtMost, InRange as comparisons, and a customised ToString() override. Toolchains derive from C.ToolchainVersion to provide specific implementations.
C.SuppressWarningsDelegate now requires a range of C.ToolchainVersions as a closed range of [min,max] versions. Either one may be null, to specify an open range.
Replaced ClangCommon.CompilerMajorVersion with ToolchainVersion of type C.ToolchainVersion. Clang queries __clang_major__, __clang_minor__, and __clang_patchlevel__ to query the version. Added named constants in ClangCommon.ToolchainVersion referring to specific releases of Xcode.
Made GccCommon.CompilerMajorVersion and CompilerMinorVersion protected, added ToolchainVersion property made from __GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__. Added named constants in GccCommon.ToolchainVersion referring to specific releases of GCC.
Removed VisualCCommon.major_version, CompilerMajorVersion and CompilerMinorVersion and replaced with ToolchainVersion property, made from _MSC_VER. Added named constants in VisualCCommon.ToolchainVersion referring to specific releases of the VisualStudio compiler.
Fixed tests that used ISemanticVersion.IsAtLeast to now use C.ToolchainVersion.

20-Oct-2018 Fixes #497. Added C.SuppressWarningsDelegate abstract class, and C.CCompilableModuleContainer.SuppressWarningsDelegate function, as an aid to delegating responsibility for warning suppressions away from the main build script. Build scripts are then more succinct for the details on the build, rather than bogging down with details of making it build cleanly. The intended use for this is for external code which cannot be fixed.

20-Oct-2018 Fixes #500. Added C.ICommonAssemblerSettingsOSX interface, containing MacOSXMinimumVersionSupported, in order to specify this in mixed assembler-compiled source binaries. There have been instances of errors when this is mismatching.

14-Oct-2018 Fixes #490. Switched Xcode 10 support in the Xcode build mode to use the new build system. https://developer.apple.com/documentation/xcode_release_notes/xcode_10_release_notes/build_system_release_notes_for_xcode_10

12-Oct-2018 Fixes #383. Changed all string comparisons to use Ordinal or OrdinalIgnoreCase. Initially this was thought of as a speed improvement, but it also resolves string comparisons from strings provided on the command line when a non-standard locale is in use.

10-Oct-2018 Fixes #492. Added Gcc 7 support. Tested in Ubuntu 18.04.01 LTS.

29-Sep-2018 Fixes #487. Xcode 9 and 10 now use objectVersion=50 in their pbxproject files.

29-Sep-2018 Fixes #489. Added Bam.Core.Settings.ModifyDefaults(), an empty virtual function, which is called after all settings interfaces defaults are called, but before the LocalPolicy. This allows, for example, specific compiler versions to override defaults since their own specifications have changed from previous versions.

29-Sep-2018 Fixes #486. Added initial support for Xcode 10 using the legacy build system. Use --Clang.version=Xcode10 to use. Reminders from the Apple release notes; building 32-bit applications and using libstdc++ are no longer support.

20-Sep-2018 Fixes #475. BREAKING CHANGE. Introducing an Attribute based mechanism for translating Settings interface properties into what the specified build mode requires. This significantly reduces the amount of boilerplate code required to add new tools with custom settings. As a good example, see any of the 'Common' toolchain packages for the Settings class for each tool defined.
Associated changes
- Bam.Core.PathKey has been removed, and constant strings are used in their place, so that they can be used as arguments to Attributes. Some of the existing keys have changed their names, in case literals had been used elsewhere.
- Bam.Core.Module.GetExecutionPolicy has been removed. All policy interfaces for tools have also been removed.
- Bam.Core.ICommandLineTool.SuccessfulExitCodes is now exposed, for tools that may return a number of 'successful' exit codes.
- Bam.Core.Module.RegisterGeneratedFile() may be called multiple times to replace the TokenizedString registered, unless a previous path has been parsed already, in which case an exception is thrown.
- Bam.Core.Module.InputModules property is now exposed, to iterate over all input modules.
- Bam.Core.Module.MakeSettings() is now the way to create a Settings class for a Module, but the default implementation may now be overridden.
- Bam.Core.Module.WorkingDirectory is now exposed, as a mechanism for different modules of the same type to be run from different directories.
- Bam.Core.Settings.Validate() may now be overridden to ensure a Settings instance is consistent and valid.
- Bam.Core.Settings.ELayout defines the different ways in which a command line translation of a module build can be written.
- Added C.CModule.OrderOnlyDependents to enumerate the non-build dependencies, recursively.
- Added C.ConsoleApplication.HeaderFiles, ObjectFiles, Libraries enumerators.
- Removed C.ConsoleApplication.WorkingDirectory (used in IDE project generation) since it was conflicting with the new Bam.Core.Module.WorkingDirectory property.
- It is possible to build an Xcode project on non-macOS operating systems, although YMMV, and requires --C.discoveralltoolchains and --C.toolchain=Clang command line options.
- C.ICommonCompilerSettingsOSX.MinimumVersionSupported has been replaced with MacOSXMinimumVersionSupported.
- C.ICommonLinkerSettingsOSX now has CurrentVersion and CompatibilityVersion properties.
- Removed C.ECompilerOutput enum. See the new C.ICommonCompilerSettings.PreprocessOnly property.
- Added C.HeaderLibrary.HeaderFiles enumerator.
- C.ISharedObjectSymbolicLinkSettings no longer has an OutputType property. But does have Force and SoftLink properties.
- C.SettingsBase.SharedSettings() is significantly simplified, and no need to emit Convert functions for the interfaces used.
- Toolchain 'common' packages now implement the majority of settings property interfaces now, and individually versioned toolchain packages inherit, and implement specific version interfaces. This reduces a lot of boilerplate code. Additionally, attributes on the settings properties now indicate the translations required, rather than separate convertion functions.
- Added tests:
 - ZipTest1
 - InstallNameToolIdTest1
 - InstallNameToolChangeTest1
 - ChrpathTest1
- MakeFile build mode defaults to GNU MakeFiles, but can now generate NMAKE makefiles using the --MakeFile.format=NMAKE command line argument.
- Python test harness can now generate and run NMAKE for the MakeFile build mode.

20-Sep-2018 Fixes #314. BREAKING CHANGE. BuildAMation is now built upon .NET Core 2.1 SDK. The following changes have occurred:
- Bam, Bam.Core and Bam.Core.Test now use new-style .csproj project files.
- VisualStudio 2017 is now required to build BAM on Windows. Latest VS for Mac and Monodevelop are required for MacOSX and Linux, respectively.
- Bam internally generates new-style .csproj project files for both package builds and debug projects.
- The latest minor version of the latest major version of the C# language is now used (at the time of writing, 7.3).
- BAM packages may now specify NuGet packages to import external functionality. These may be specified per-platform in the package definition file.
- Linux progress logging in Bam.Core.dll is disabled due to a performance bug (https://github.com/dotnet/corefx/issues/32174).
- Bam.Core.Win32RegistryUtilities no longer uses Microsoft.Win32.RegistryKey in its public API, since this functionality is now in a NuGet package.
- Bam.Core.OSUtilities.RunExecutable will now throw an exception (RunExecutableException) in failure, or return an instance of RunExecutableResults in success, in order to have full access to stdout, stderr and process exit codes.
- A custom NuGet package repository can longer be project local, so the NuGetPackages directory in the distribution no longer exists.
- Property Bam.Core.BamState.RunningMono has been removed.
- Property Bam.Core.BamState.NuGetDirectory has been removed.
- BAM_FEATURE_MODULE_CONFIGURATION has been incorporated into core functionality. No feature #define is needed now.
- Added Bam.Core.Hash static utility class to handle all persistent hashing, since GetHashCode() is definitely no longer deterministic across application runs in .NET Core.
- Bam.Core.RelativePathUtilities has been written to no longer use System.Uri.
- bam --installdir will now display the installation directory.
- bam --updatebamassemblyversions will update all package definition files read to the current BAM assembly version.

======== End of v1.2 releases ========
















27-Jul-2018 ======== Version 1.2.0 Release ========

11-Jul-2018 Fixes #476. -bigobj is no longer unconditionally set in generated .vcxprojs.

30-Jun-2018 Fixes #474. Increase default minimum macOS deployment version from 10.6 to 10.7, to be more useful with modern C++ and using libc++.

28-Jun-2018 ======== Version 1.2.0 alpha 5 Release ========

23-Jun-2018 Fixes #471. Added VisualCCommon.ICommonCompilerSettings.IncreaseObjectFileSectionCount (bool) property (defaults to false) to enable the "big obj" compilation feature.

23-Jun-2018 Fixes #454. Added C.ExternalSourceGenerator, allowing specification of an external tool to run, with arguments, input files, and expected output files. Supported on Native, VSSolution, Xcode, and MakeFile build modes.
Added overload to C.CModuleContainer.AddFile(), accepting a Bam.Core.TokenizedString.
Added overload to VSSolutionBuilder.VSSettingsGroup.AddSetting, accepting an IEnumerable of Bam.Core.TokenizedString (as may be produced by a LINQ operation).

Added new test cases, ExternalSourceGeneratorTest1 and ExternalSourceGeneratorTest2, that exercises C.ExternalSourceGenerator by invoking Python.

23-Jun-2018 Fixes #470. Use of EXCLUDED_SOURCE_FILE_NAMES in generated Xcode projects was not distinct enough to cover a file with identical basename, but in different directories.

22-Jun-2018 Fixes #465. BREAKING CHANGES
- Removed Bam.Core.ExecuteReasoning.DeferredEvaluation enumeration and Bam.Core.ExecuteReasoning.DeferredUntilBuild() function entirely, and all associated code in packages and tests. This removes a lot of repetitive code.
- Bam.Core.Module.Evaluate has been renamed to EvaluateInternal, and made protected. This is a breaking change for almost all derived Module classes.
- Single threaded build mode: evaluation is now performed in lock-step with module execution in the main thread. (New behaviour)
- Multi threaded build mode: evaluation is performed in background tasks, alongside module execution also in background tasks (different schedulers). (Updated old behaviour; previously not all evaluation calls were in a task)
- Added Bam.Core.IModuleExecution.Executed readonly property to query the execution status of a module.
- Added Bam.Core.Module.EvaluateAsync and EvaluateImmediate functions, although these are only of use in the core assembly.
- There is no longer access to a System.Threading.Tasks.TaskFactory on the Bam.Core.Graph instance's MetaData in Native build mode. Previously, individual module Evaluate() functions could thread, whereas the threading now happens as part of the Core assembly. (You may want to review your custom Evaluate functions if you do threading already.)
- C.ObjectFile EvaluateInternal will now wait on the execution task of any un-executed Module dependency that isn't derived from C.SourceFile. This is to synchronise with source code generators.
- When -j=0 is selected on the command line (use maximum threads), it will now select System.Environment.ProcessorCount - 2, for System.Environment.ProcessorCount > 2, to allow resources for the threaded evaluation.
--viewgraph command line option now shows the original output (order in which modules will be built), but also now a module hierarchy.

18-Jun-2018 Fixes #460. Updated provided packages and tests to handle being executed from an installation path including a space.

Added Bam.Core.IOWrapper.EncloseSpaceContainingPathWithDoubleQuotes() and EscapeSpacesInPath(), to either add surrounding double quotes around a path, or escape each space with a backslash.

Your milage may vary on
- Makefiles - GNU Make does not handle spaces well at all
- tar on Linux (but not macOS)
- Mingw's resource compiler (windres) does not handle long path names with spaces, and you cannot generate short path names for files (say the output of the tool) that don't yet exist

16-Jun-2018 Fixes #186. Git tag, differences from tag, and branch are now included in 'bam --version' output.

15-Jun-2018 Fixes #461. Downgraded NuGet for NUnit to 3.6.1, following .NET Standard dependency errors when using newer versions.

14-Jun-2018 Fixes #459. BAM, since v1.2.0 alpha3, has relied upon a NuGet of vswhere to detect VisualStudio installations. This NuGet, however, was not shipped as part of the binary distribution. This has now been included.

13-Jun-2018 Fixes #458. Fixes internal script to build BAM for release on Windows.

13-Jun-2018 Fixes #456. Since BuildAMation has no installer, include a Windows PowerShell script (create_shortcut_to_env.ps1) that will generate a Windows shortcut to env.bat that persists the command prompt once run. The shortcut is called BuildAMation-Environment.lnk.

12-Jun-2018 ======== Version 1.2.0 alpha 4 Release ========

09-Jun-2018 Fixes #452. Adding filters to VisualStudio projects no longer throws a null dereference exception when the root of a drive is encountered, through repeated use of System.IO.Path.GetDirectoryName.

09-Jun-2018 Fixes #442. WindowsSDK configuration is now taken from the vcvarsall setup from the VisualC package. WindowsSDK packages are tied to specific VisualC versions (this is not new). By default, vcvarsall.bat will try to find the most recent version in the registry of that WindowsSDK. However, with VisualC 14.0 and 15.0 (defaulting to WindowsSDK-10.0), you can now override this by specifying WindowsSDK-8.1 in the package definition file, or BAM command line.
If you don't want to use the latest WindowsSDK-10, and have older versions installed, you can override the behaviour of vcvarsall.bat by specifying --WindowsSDK10Version.override=10.0.xyz.w on the BAM command line.
Note that using VisualC-14.0 (VS2015) will specify a WindowsSDK10 override of 8.1 by default. This is to maximise compatibility with WindowsSDKs installed with VisualStudio 2017 on the same machine.
With the older VisualC-10.0 (VS2010), the default WindowsSDK is 7.0A (with the compiler) that offers 32-bit support with the Express edition. You may also specify the WindowsSDK-7.1, and BAM will be able to use that when 64-bit compilers are requested.

Generated .vcxprojs will have the WindowsTargetPlatformVersion property set to the version of the WindowsSDK in use.

WindowsSDK.WindowsSDK module has been deleted, as its patches are no longer required. All tests have been updated to reflect this.
WindowsSDK.MetaData is mostly now just used for detection, although WindowsSDK-7.1 does override the use of vcvarsall.bat with its own command script.
WindowsSDK.WinResourceCompiler has been renamed to WinResourceCompilerBase and reclassified as an abstract class. Instead, two new sealed classes WinResourceCompiler32 and WinResourceCompiler64 have been introduced, corresponding to the architecture bit-depth in use.

Disambiguation of which toolchain to use is now performed just before the very first C module requiring a compiler, linker, archiver, is required. Exceptions are only thrown when a specific tool is requested, but cannot be delivered. Reflection to identify tool module types now only occurs on the first instantiation; the module is then reused for future instances, without needing to query reflection. Logging of details of the toolchain in use occurs here.

08-Jun-2018 Fixes #448. Added BAM command line option, --injectdefaultpackage=<value>, in order to temporarily add a package, and make it the default, into any build. Particularly useful for testing (it's exposed in the Python test harness too) to override a dependent.

05-Jun-2018 Fixes #447. Strings created by Bam.Core.TokenizedString.CreateVerbatim will no longer have their forward slashes on Windows changed to back slashes. That would be fine for paths, but as a verbatim string, they should not be modified. This allows strings such as command switches (/SOMEFEATURE) to be stored.

02-Jun-2018 Fixes #444. A package that has multiple Installer.InnoSetupInstaller modules intermittently saw I/O error 183 coming from InnoSetup (means duplicate error on network, or directory exists), when BAM was in multithreaded mode. Process Monitor suggested that this was because all .iss files referred to the same OutputDir, so multiple ISCC.exe processes had a race condition creating the directory. BAM now creates the OutputDir when creating the .iss files, so there should be no race with ISCC.exe.

01-Jun-2018 Fixes #445. Classes of PackageMetaData can now be dependent on each other. The dependent meta data instance will be created on-demand.

23-May-2018 Fixes #441. Fixed Xcode project generation for linking against prebuilt static libraries.

17-May-2018 Fixed #440. Fixed regression introduced in Xcode project generation in the fix for #436 in v1.2.0a3, that would not correctly generate order-only dependencies.

13-May-2018 ======== Version 1.2.0 alpha 3 Release ========

07-May-2018 Fixes #438. C.CModule now has a protected overloaded function SetSemanticVersion, that deals with setting the module's Macros for MajorVersion, MinorVersion, PatchVersion. Integer argument overrides available, as well as a pure string argument version, and one that accepts Bam.Core.ISemanticVersion. Bam.Core.BamState (accessible via Bam.Core.Graph.Instance.ProcessState) also now implements ISemanticVersion.

29-Apr-2018 Fixes #391. VisualC packages now use their respective vcvarsall.bat to initialise the environments used for running their tools.

Bam.Core.OSUtilities.GetInstallLocation has been extended with optional arguments: searchDirectory, a string path for a directory to search immediately (Windows only); uniqueName, a string key to reference a cached executable path (useful if the same executable filename may reside in multiple locations, e.g. 32-bit/64-bit compilers); throwOnFailure, a Boolean (defaults to true) indicating whether a failure to find an executable results in an exception, or just returning null.
Bam.Core.OSUtilities.GetInstallLocation now returns a Bam.Core.StringArray, returning all matches for the executable on the search paths. The calling code is expected to determine which discovered path should be used.

27-Apr-2018 Fixes #339. The vswhere NuGet package is now installed when building BAM. The VisualC packages use this to determine install locations.

22-Apr-2018 Fixes #429. Bam.Core.OSUtilities.GetInstallLocation on Windows will now search in the 64-bit (if applicable) and 32-bit Program Files folders, recursively, for the specified file. This can be slow, but will be performed just once if the file is found.

Added Publisher.ZipModule to ZIP archive a directory. Uses the zip command line tool on Linux and macOS, and 7zip on Windows (will locate the latter using the above extension to GetInstallLocation, if installed in the default location).

13-Apr-2018 Fixes #436. Any order-only dependents into a project generating link step, now recurses into each dependent to add its own order-only dependents. For example, if A is runtime dependent on B and C, and D is runtime dependent on A, then you'd expect D to require A, B, C.

12-Apr-2018 Fixes #435. Bam.Core.IOverrideModuleConfiguration.execute() now also passes the Module's build Environment, in order to make build config dependent choices on how the Module's large scale configuration is set.

12-Apr-2018 Fixes #434. Added overload Bam.Core.Graph.FindReferencedModule<T>(env) function, that accepts a non-null Bam.Core.Environment argument. This is a read-only function that returns the instance of the referenced Module of type T from the specified Environment. Unlike it's no-argument overload, this new function will not attempt to create an instance if it is missing, so can be invoked outside of Module's Init() functions.

11-Apr-2018 Fixes #433. Bam.Core.OSUtilities.GetInstallLocation will no longer output stderr messages.

11-Apr-2018 Fixes #432. The existing Bam.Core.PackageDirectoryRedirectAttribute allows all modules in a package to reassign their $(packagedir) macro to the specified path. In the case of a single module in a package of many needing to redirect its $(packagedir), something else is needed. Bam.Core.ModulePackageDirectoryRedirectAttribute achieves this. It is a class level attribute, taking one parameter, the type of the Module whos package directory it wants to redirect to. An example use case for this would be subclassing, from package P1, an existing module M (that builds code) in package P2, and simply adding a new dependency in the subclass' Init function. Without the redirected $(packagedir), the subclass' build would try to find M's source files in package P2, instead of P1. Uses of ModulePackageDirectoryRedirectAttribute override uses of PackageDirectoryRedirectAttribute.

11-Apr-2018 Fixes #430. Debuggable projects generated from BAM have (by default) preferred 32-bit, even though the configuration is Any CPU. Disable this, so that environment variables are picked up for 64-bit (especially on Windows).

30-Mar-2018 Fixes #428. If the system temporary folder exceeds 65k files, System.IO.Path.GetTempFileName will throw an exception. Added a wrapper function, Bam.Core.IOWrapper.CreateTemporaryFile() that throws a sensible error with instructions on how to fix the issue. Also, all dangling temporary files are now deleted.

27-Mar-2018 Fixes #427. Windows .rc files for executable/dll versioning are now only written to disk if the don't exist, or their contents from the previous write has changed. This avoids unexpected relinks when VisualStudio projects are regenerated, but the code for the linked executables hasn't changed.

27-Mar-2018 Fixes #426. Repeated calls to Bam.Core.OSUtilities.GetInstallLocation no longer invokes an external process except for the first. The result is cached.

23-Mar-2018 Fixes #388. Cleaned up compiler optimization flags.

C.EOptimization no longer has a 'full' option (this is VisualC specific). C.EOptimization.Custom now expands to nothing.
However, there are now compiler specific optimization settings to allow compiler extensions, when C.EOptimization.Custom is selected.
VisualC exposes Full.
Gcc exposes O3 and Ofast.
Clang exposes O1, O3 and Ofast.

C.ICommonCompilerSettings.OmitFramePointer is now evaluated after C.ICommonCompilerSettings.Optimization, in case the choice of the former differs from that in the optimization.

Clang mappings changes
C.EOptimization.Speed was -O1, now -O2.

Gcc mappings changes
C.EOptimization.Speed was -O1, now -O2.
C.EOptimization.Size was -Os, now -O1.

Mingw mappings changes
C.EOptimization.Speed was -O1,  now -O2.
C.EOptimization.Size was -Os, now -O1.

VisualC mappings changes
C.EOptimization.Speed was -O1, now -O2.
C.EOptimization.Size was -Os, now -O1.

23-Jan-2018 ======== Version 1.2.0 alpha 2 Release ========

20-Jan-2018 Fixes #422. Added synchronization between Bam.Core.TokenizedString.IsParsed and Bam.Core.TokenizedString.Parse().

20-Jan-2018 Fixes #421. Publisher.Collation.IncludeAllModulesInNamespace now only includes modules that generate the specified pathkey.

20-Jan-2018 Fixes #420. Container source modules which are passed into C[.Cxx].ConsoleApplication.ExtendSource() should not standalone compile, as there is no guarantee that they have sufficient dependencies in order to compile. The applications consuming them may provide those dependencies.

20-Jan-2018 Fixes #419. Publisher.Collation.IncludeAllModulesInNamespace now includes an optional regular expression filter. By default, the function will match all Bam.Core.Module based classes. Using the filter will then reduce this list down to only those Modules whose name matches the filter.

19-Jan-2018 Fixes #417. Stripped collation must always copy from the original collation. This ensures that the stripped version is always made from a source that is guaranteed to run.

19-Jan-2018 Fixes #418. Publisher copy tools (cp,xcopy,rsync) now handle their particular needs for source and destination paths, rather than this being coded into each module type.

16-Jan-2018 Fixes #416. Fix Python script (coding/build_bam.py) in order to use nuget.exe on Linux downloaded from https://nuget.org/downloads, as described in https://docs.microsoft.com/en-us/nuget/guides/install-nuget#mac-osx-and-linux.

16-Jan-2018 Fixes #415. Trim all new-line characters from stdout captured from Bam.Core.OSUtilities.RunExecutable. This was causing issues with xcopy.exe in VisualStudio post-build steps, leaving newline characters in.

14-Jan-2018 Fixes #414. Speculative fix for TravisCI not supporting cursor positioning for logging.

14-Jan-2018 Fixes #413. Any module derived from Bam.Core.PrebuiltTool now has the path provided by the Executable property checked for existence in it's Init() function. If the path does not exist, a Bam.Core.UnableToBuildModuleException exception is thrown. If this is not caught and handled, then the module creating the tool instance will fail to build. The 'Test' script has been updated to handle a missing Mingw installation for one of its modules.

13-Jan-2018 Fixes #412. Ignored CollatedObjects also need to be ignored in the StrippedBinaryCollation and DebugSymbolCollation modules.

12-Jan-2018 Fixes #411. Publisher.Collation HeaderDir macro and class property is now defined for all application types, not just library.

12-Jan-2018 Fixes #410. Publisher.Collation now exposes a PublishingType property, which is the value passed in SetDefaultMacrosAndMappings.

09-Jan-2018 Fixes #375. VisualStudio 2010 Express CRTs can now be found.

08-Jan-2018 Fixes #409. MakeFile stripped binary rules now have the required prerequisites.

07-Jan-2018 ======== Version 1.2.0 alpha 1 Release ========

06-Jan-2018 Fixes #360. Publisher package rewrite, and Bam.Core.TokenizedString update.
Publisher:
In an effort to reduce duplication, Publisher now walks the dependency hierarchy declared in the build in order to automatically determine additional files to publish. In short, you now only need to specify the main modules (referred to as anchors), with Include<moduletype>(PathKey) that you wish to publish in your Collation module.
As a side-effect, files may be published to customisable locations under the publishing root. Default layouts are provided, which depend both on platform, but also type of software application (console app, windowed app, library). For example, macOS windowed applications are published as application bundles, while macOS console applications are published as a flat directory structure.
If dependents need to go to non-default locations, then their publishing directories can be set by Find<moduletype>() on the Collation, and invoking SetPublishingDirectory().
If dependents should be not be collated at all (e.g. build-time helper utilities), they can be flagged using Ignore<moduletype>().
DebugSymbolCollation and StrippedBinaryCollation remain unchanged in their API.
TokenizedString:
These changes were to support the more dynamic approach to the Publisher package above.
- Renamed Bam.Core.TokenizedString.CreateInline to Bam.Core.TokenizedString.CreateForceInline.
- Removed Aliased TokenizedStrings. Use Set to change an existing string now.
- TokenizedString.Parse() no longer accepts any arguments.
- Added TokenizedString.UncachedParse() to perform a parse (without storing the result in the TokenizedString) with custom MacroLists. Arrays of MacroLists may now be used, in order to provide multiple sources of macro expansion. MacroLists are used in order in the array; macros that appear in more than one MacroList will only accept their first-encountered expansion.
- Added TokenizedString.Clone() to copy, and re-assign the module on which a string is currently mapped to.
- Added TokenizedString.RefersToMacro() function to query if the string has reference to a particular macro.
- Added TokenizedString.Set() function to replace the string and positional arguments for the TokenizedString. This will only work for unparsed strings. It is recommended to use this method rather than simply assigning a new C# object reference to a variable, as the old object reference may have already been used elsewhere.
Other Additions:
- Added Bam.Core.PeekableStack in order for Bam.Core.Graph.CommonModuleType to be inspected further back that just the top of the stack.
- Added Bam.Core.TokenizedString unit tests.
- Added checks for circular macro references in Bam.Core.MacroList.
- Added Bam.Core.TokenizedStringArray.ToEnumerableWithoutDuplicates, to remove duplicates, post-parsing. (Some strings with the same expansion may exist in the array, due to them being bound to different modules in the same package.)
- MakeFile clean target now works when executed from a CMD prompt in Windows.
Other Changes:
- Bam.Core.TokenizedStringArray.Contains now uses the parsed strings where possible for comparisons.
- C.SharedObjectSymbolicLink modules, to make the symbolic links for SOName and LinkerName for a shared object, are now first class citizens. (Easier to manage for publishing.) C.DynamicLibrary and C.Cxx.DynamicLibrary now implement the IDynamicLibrary interface, which exposes LinkerNameSymbolicLink and SONameSymbolicLink properties to access the respective modules. The shared object symbolic link modules depend on the original dynamic library module.
- Linux LD links now prefer the LinkerName symbolic link of dynamic libraries.
- Linux LD RPath-link paths are only added for dynamic libraries dependent on dynamic libraries when there is no explicit link step.
- C.OSXFramework replaces DirectoriesToPublish, FilesToPublish, DirectoriesToPublish, SymlinksToPublish, with the abstract FrameworkBundleName and FrameworkLibraryPath properties. By default, Frameworks are published as-is (now using rsync), but can be configured on specific Framework instance levels for exclusions.
- MakeFile generation goes to more effort in making unique variable names.
- Access to MakeFile Targets is now through delegates and function calls, in order to make the scripts threadsafe.
Other Removals:
- Removed Bam.Core.Module.MakePlaceholderPath. You can now use TokenizedString.Set to update an existing string, if it has not yet been parsed.

02-Dec-2017 Fixes #389. NUnit is added via NuGet packages. This is supported on VisualStudio, VisualStudio for Mac and MonoDevelop.
Note that VS 2013 is a little backward (tries to modify the .sln), and VS for Mac at least seems to follow the VS 2017 support for NuGet.
Added a Bam.Core.Test assembly, which uses NUnit markup.
NuGet packages added for VS to explore and run NUnit tests.
Also, used NuGet packages in order to run tests from the command line, which are integrated into the release process.

29-Oct-2017 Fixes #380. Eliminating 'lock (this)' expressions and hardening Xcode generation thread safety. THIS IS A BREAKING CHANGE.

'lock (this)' is considered bad for synchronisation, as the caller may also lock the object. Instances of these have been eliminated, either by replacing with a reduced scope lock on private only objects, or using System.Lazy<T> or System.Threading.LazyInitializer for thread-safe object initialization.

Many properties of XcodeBuilder.Project that were public are now private, but with new public accessors containing appropriate synchronisation.

XcodeBuilder.Target.Type is no longer public. The setter for this may have been used by external code, so this may cause compiler errors. There is now a public accessor, XcodeBuilder.Target.SetType() to use instead.

27-Oct-2017 Fixes #373. Tightening up TokenizedString parsing APIs. THIS IS A BREAKING CHANGE.

Parse() and ToString() used to do the same thing, but now they are different.

Parse() no longer returns anything, and if any errors occur during parsing, an error message will be cached internally.

ToString() will only display the parsed string, or throw an exception if it is not parsed, or includes the error message if it failed to parse.

In short, TokenizedStrings only throw exceptions now when ToString() encounters an unparsed or failed to parse string, or when a second Parse() attempt is made.

In addition to making functions have one purpose, this change also allows the possibility of TokenizedStrings to be unparsable (possibly for use as a template, if macros are defined elsewhere), but will only report the error if attempted to be explicitly used.

TokenizedString comparisons now use the hash calculated at construction, so no parsing is required. WARNING: If previously user scripts did TokenizedString.Equals(TokenizedString), this was comparing parsed strings; this is likely to fail now. Change to TokenizedString.ToString().Equals(TokenizedString.ToString())

Ideally, TokenizedStrings should be created during Init() or patching stages. These will be automatically parsed in the parsing stage, and are then available for use in the build stage, with ToString(). Use of Parse() prior to the parsing stage should be frowned upon.

TokenizedString.ParseAndQuoteIfNecessary() has been replaced with ToStringQuoteIfNecessary().

Added TokenizedString.IsParsed property to help with strings created after the parsing stage.

C.PreprocessorDefinitions now internally store TokenizedStrings, not strings, although the API is unchanged.

Test harness has been changed so that Native build mode runs repeat their build command, but without a clean, as incremental builds run down different codepaths internally. This is to give wider test coverage.
As a side-effect of this, macOS DMG installer generation now does the 'hdiutil convert' step to a temporary DMG and subsequently moves it, as it fails if the output DMG exists.

Added ProceduralHeaderTest2, which exercises the C.ProceduralHeaderFileFromToolOutput module type, again increasing test coverage.
Added PublishingSymlinkTest1, which exercises publishing a symlink, to increase test coverage. This is for Linux and macOS.
Added DoNotCompileTest1, which exercises having source files referenced by modules which do not need to be explicit compiled (e.g. they are #included into other source).
Added VersionScrippTest1, which exercises version scripts for exporting symbols from a shared object, increasing test coverage. This is for Linux.
Extended AssemblerTest1, for improved test coverage.
Extended LinkPrebuiltLibrary, for improved test coverage.
All tests now require at least BAM v1.2.0.

Added command line option, --withstacktrace. This signifies a change of behaviour from previous versions of BAM. This is because it was noticed during profiling that calls to System.Environment.StackTrace were significantly slowing down the build, particularly in Mono on macOS. Stack traces were captured at various points during TokenizedString creation and parsing to aid debugging in error messages. By default, stack traces are no longer captured. Please pass the --withstacktrace command line option to bam to re-enable them. A warning is displayed in suitable verbosity modes indicating that enabling those option will slow down your build.

19-Oct-2017 Fixes #379. Debug projects, generated with bam -p, now include the preprocessor define, __MonoCS__, to match what the compiler sets for dynamically compiled package assemblies in a build step.

18-Oct-2017 Fixes #377. Previously, only one Bam.Core.IOverrideModuleConfiguration implementation could be present anywhere in the compiled packaged assembly. However, one could be in a tests namespace, and thus not affect a normal package build. The logic of finding the right override class has been adjusted.

18-Oct-2017 Fixes #376. VisualStudio 2010 incorrect published files to $(OutputPath) in VSSolution build mode, which on that version of VS, is different (and incorrect) for the intended usage, and should be $(OutDir).

11-Sep-2017 Issue #360. PluginTest example now exports a symbol from a plugin, attempts to load it, and use the symbol.

07-Sep-2017 Fixes #355. TokenizedString now uses a hash internally, as opposed to string compares, to look for invariant strings.

06-Jun-2017 Fixes #342. Can now use 'python codingtools/generate_docs.py' to build local documentation for BAM. Assumes Python is invoked from the directory containing BuildAMation.sln, and that the path to the doxygen executable is passed.

05-Jun-2017 Fixes #341. Can now use 'python codingtools/build_bam.py' to build a local copy of BAM. Assumes Python is invoked from the directory containing the BuildAMation.sln.

05-Jun-2017 Fixes #352. The xbuild utility is now redundant in Mono; msbuild is the successor.

04-Jun-2017 Fixes #173. The master package now has it's parent directory added as a repository. This is to cover the case of the master package not residing in a formal repository (with packages and tests directories), in order to locate sibling packages.

04-Jun-2017 Fixes #348. Discovery of package repositories can be slow, due to a full recursive search through candidate directories. This was particularly slow for very deep directory hierarchies, and did not stop when a candidate package was found through such hierarchies. As such, the definition of a package repository has now changed to accomodate a faster search algorithm: A package repository is now a single directory containing packages; any non-package folders will no longer be considered as a nested package repository. IMPORTANT: This can be a breaking change for existing packages, depending on how their definition files were configured for previous versions of BAM.

04-Jun-2017 Fixes #349. Added an ellipsis to all output message that will have some progress following it, to clarify to expect to see something on the console log.

04-Jun-2017 Fixes #345. Added progress report to package repository exploration, which will appear both on builds as well as debug project creation.

02-Jun-2017 Fixes #347. BAM used to report the C# compiler on it's output. Although correct at the time, this was in fact the Common Language Runtime (CLR) major.minor version. This has been corrected, and the targeted .NET framework is also displayed.

======== End of v1.1 releases ========













08-Jun-2018 Fixes #449. Guard against spaces in the path that BuildAMation is installed/cloned in. Also, environment scripts (env.bat/env.sh) can be run from any directory now.

13-May-2018 ======== Version 1.1.7 Release ========

13-May-2018 Fixes #439. VisualC-15.0 is now compatible with the latest VisualStudio 2017 15.7 release.

13-May-2018 Bumping to version v1.1.7.

11-Mar-2018 ======== Version 1.1.6 Release ========

11-Mar-2018 Fixes #425. VisualC-15.0 is now compatible with the latest VisualStudio 2017 15.6 release.

11-Mar-2018 Bumping to version v1.1.6.

07-Dec-2017 ======== Version 1.1.5 Release ========

07-Dec-2017 Bumping version to v1.1.5.

07-Dec-2017 Fixes #392. VisualC-15.0 is now compatible with the latest VisualStudio 2017 15.5 release.

04-Oct-2017 ======== Version 1.1.4 Release ========

25-Sep-2017 ======== Version 1.1.4 beta 1 Release ========

24-Sep-2017 Fixes #369. Added C.ICommonCompilerSettings.NamedHeaders, that is a list of headers to process as if appearing as the first line of each affected source file. Supported on VisualC, Mingw, Gcc and Clang (macOS). Added test case, ProcessNamedHeaderTest, that attempts to include iso646.h (http://www.cplusplus.com/reference/ciso646/).

24-Sep-2017 Fixes #367. Fixed stack overflow while analysing package dependencies.

24-Sep-2017 Fixes #368. Xcode projects were ill-formed if C.IAdditionalSettings were added containing a space, e.g. '-include limits'.

23-Sep-2017 Fixes #366. Added Clang-Xcode9 package for Xcode9 support. Test packages updated to support Xcode9, but Xcode8 remains as the default, so use ./runtests.py --Clang.version=Xcode9 in order to exercise.

31-Aug-2017 ======== Version 1.1.3 Release ========

30-Aug-2017 Fixes #359. Regression was introduced in the fix for #358 in v1.1.2, stopping commands from xcrun, hdiutil and tar from executing on macOS and Linux. The fix introduces Bam.Core.OSUtilities.RunExecutable and Bam.Core.OSUtilities.GetInstallLocation functions. GetInstallLocation uses 'which' on *nix platforms and 'where' on Windows, both making use of the RunExecutable. These are used to find the paths for xcrun, hdiutil and tar, and have been reused in other packages too. GccCommon.ConfigureUtilities are now deprecated in favour of the new functions, and will be removed in a future release.

19-Aug-2017 ======== Version 1.1.2 Release ========

19-Aug-2017 Fixes #357. VisualC-15.0 now tracks published versions in VisualStudio 2017 15.3.1. The VC Tools version has changed to 14.11.25503. The C runtime version has changed to 14.11.25325. A mistake from earlier VS2017 releases corrects the redist version from Microsoft.VC150.CRT to Microsoft.VC141.CRT. This change is not backward compatible with earlier releases of VisualStudio 2017.

19-Aug-2017 Fixes #358. Prebuilt tool executables that do not exist at their specified paths on disk now result in an exception being thrown.

02-Jun-2017 ======== Version 1.1.1 Release ========

31-May-2017 Fixes #346. BAM .csproj files and generated package debug projects could not be built in MonoDevelop 7 due to MSBuild's Microsoft.CSharp.Targets not being found. This is a case error, the file should be Microsoft.CSharp.targets.

30-May-2017 Fixes #336. The VisualStudio 2017 redist paths changed sometime between RTM and the 15.2 update. This broke local application deployment. Now using the C runtime version 14.10.25008 for x86 and x64.

16-May-2017 ======== Version 1.1.1 beta 4 Release ========

16-May-2017 Fixes #334. Following tests are now tested in Linux with additional build modes: ObjectiveCTest1 (Native,MakeFile); ProceduralHeaderTest1 (MakeFile); DeltaSettingsTest1 (MakeFile); EmbedStaticIntoDynamicLibrary (MakeFile); PublishingTest1 (MakeFile) and PublishingTest2 (MakeFile). In OSX, these tests are now tested in Xcode build mode: EmbedStaticIntoDynamicLibrary, ProceduralHeaderTest1, ProxyTest.

15-May-2017 Fixes #335. MakeFileBuilder.MakeFileCommonMetaData.Directories and Environment properties are no longer public. Instead, accessors called AddDirectory has been added (ExtendEnvironmentVariables already existed), and utility functions to export both of these to a StringBuilder have been added to the class (ExportEnvironment and ExportDirectories).

14-May-2017 Fixes #331. Added C.PatchUtilities static utility class, with the helper functions GetCompiler and GetBitDepth. These are useful in static patch functions, that only have the Module property on the settings input to determine compiler versions and the architecture built for. When patch lambdas are inlined into the Init() function of a module, access to module's properties are immediately available, but in static patch functions, these utilities are recommended. Test8 has been updated to illustrate using the PatchUtilities functions.

14-May-2017 Fixes #322. Command line argument values that should be treated as integers now throw a more useful exception if the value does not parse.

13-May-2017 ======== Version 1.1.1 beta 3 Release ========

13-May-2017 Fixes #333. Fix DeltaSettingsTest2 example on Linux.

13-May-2017 Fixes #332. Mingw assembler support now working. AssemblerTest1 example also now builds with Mingw.

11-May-2017 ======== Version 1.1.1 beta 2 Release ========

10-May-2017 Fixes #330. Adding an empty string to a C Container AddFiles() function resulted in a general exception.

10-May-2017 Fixes #329. Assembler settings interfaces now includes the Bits (C.EBit type) to distinguish between 32-bit and 64-bit builds.

09-May-2017 Fixes #328. Modules without Settings will now throw an exception if they only have private patches. Those with public patches are allowed, since these affect other modules that depend on them.

04-May-2017 Fixes #325. Assembler source file support in VisualStudio projects now uses MASM configurations, rather than custom build rules.

03-May-2017 Fixes #327. VisualCCommon.ICommonAssemblerSettings and ICommonLinkerSettings now have a SafeExceptionHandlers boolean option (defaults to true for both). This is only required in 32-bit builds, mostly with assembler code. See MSDN for details.

03-May-2017 Fixes #324. Path for the assembler tool (ml) in VisualC now fixed for VisualStudio 2017. Added new test, AssemblerTest1, to exercise the fix.

01-May-2017 Fixes #326. Xcode projects would not be buildable in the situation with source files with a mixed setting of ClangCommon.ICommonCompilerSettings.Pedantic and a compiler warning suppression, such as -Wno-long-long, that is included in the pedantic warnings. This was due per-file settings being used for pedantic, and this was appearing after the warning suppressions, hence re-enabling them. In these circumstances, projects are now generated with -Wpedantic in the build settings, and per-file -Wno-pedantic where necessary. Added a new test, DeltaSettingsTest2 to exercise this fix.

23-Apr-2017 Fixes #323. C.ICommonWinResourceCompilerSettings now has a property, PreprocessorDefines, to pass definitions to the resource compiler. With Mingw and WindowsSDK implementations for Native and VSSolution build modes.

21-Apr-2017 ======== Version 1.1.1 beta 1 Release ========

17-Apr-2017 Fixes #319. Test harness now includes an executive summary of counts of succeeded, failed and ignored tests.

17-Apr-2017 Fixes #318. Default macOS deployment version is now 10.6 (was the current SDK). Setting this as old as possible for maximum backward compatibility. The default can be overridden by implementing the interface Bam.Core.IPackageMetaDataConfigure<Clang.MetaData>. See the Cxx11Test1 example.

15-Apr-2017 Fixes #317. Added all missing current C++ standards to C.Cxx.ELanguageStandards enumeration. Added are Cxx03, GnuCxx03 (not supported by Clang), GnuCxx11, Cxx14, GnuCxx14.

07-Apr-2017 ======== Version 1.1.0 Release ========

07-Apr-2017 Fixes #315. Switch tests on macOS to use Clang-Xcode8 by default.

30-Mar-2017 Fixes #312. Generated Xcode projects now honour 'false' values for ClangCommon.ICommonCompilerSettings.AllWarnings and ExtraWarnings.

25-Mar-2017 ======== Version 1.1.0 beta 3 Release ========

25-Mar-2017 Fixes #281. Improve the error message when mono is not detected.

21-Mar-2017 Fixes #304. MingwCommon.IArchiverSettings and GccCommon.IArchiverSettings have been renamed, for consistency, to MingwCommon.ICommonArchiverSettings and GccCommon.ICommonArchiverSettings. IMPORTANT: If user packages are referencing those old interface names, this is a breaking change, and requires script updates.

21-Mar-2017 Fixes #307. C source container indexing can now accept a path, using forward slashes to separate directories, to pattern match files in the container. Previously, this did not work on Windows, due to the comparison of forward slashes with back slashes. Using forward slashes is the BAM cross-platform convention.

21-Mar-2017 Fixes #226. Added Bam.Core.ISemanticVersion, and extension methods to compare an ISemanticVersion against a specified version (see ISemanticVersion.IsAtLeast). Changed Bam.Core.IProductDefinition to inherit ISemanticVersion since they shared properties - this may require package scripts to be fixed, if IProductDefinition was explicitly implemented. C.CompilerTool now implements ISemanticVersion, and Clang, Gcc, Mingw and VisualC compilers have been updated with major and minor versions. Changed Test8 which was causing a compiler warning starting with VisualC 2015.

21-Mar-2017 Fixes #311. Added read-only property, C.CCompilableModuleContainer.Compiler, so that source containers can query the compiler in use, rather than needing to drill down to individual object files.

19-Mar-2017 ======== Version 1.1.0 beta 2 Release ========

19-Mar-2017 Fixes #310. Added VisualC 2017 support. Test built in Windows 8.1. IMPORTANT: Note that VisualCCommon.Librarian has been split into VisualCCommon.LibrarianBase, Librarian32 and Librarian64. This is a breaking change for any user packages that reference VisualCCommon.Librarian will need updating.

19-Mar-2017 Fixes #309. Added Clang Xcode8 support. Test built in 10.11.6 (but not run as requires 10.12).

19-Mar-2017 Fixes #172. Added Gcc 5.4 support. Tested in Ubuntu 16.04.2 LTS. Fixed the Python command line option in the test scripts to select the version of Gcc.

15-Mar-2017 ======== Version 1.1.0 beta 1 Release ========

15-Mar-2017 Fixes #107. Removed deprecated 'removetrailingseperator' TokenizedString post-function.

15-Mar-2017 Fixes #303. Added configuration support for named Module types. New Core interfaces: Bam.Core.IHasModuleConfiguration, Bam.Core.IModuleConfiguration, Bam.Core.IOverrideModuleConfiguration. IHasModuleConfiguration is implemented by Modules indicating they have a configuration interface, and requires two properties returning Module specific types. The configuration interface is defined per module, but must implement IModuleConfiguration, and only declare the read-only properties that are exposed for configuring the Module. Additionally, the Module must defined a non-abstract class, implementing its configuration interface, and also defining the default configuration in a constructor, and public setters for the properties. The Modules patches can now access an instance of the interface through the Configuration property on the Module itself, in order to honour the configuration the user requests. Changing a configuration property in a patch will result in ambiguous behaviour. Top-level packages should define a class implementing the IOverrideModuleConfiguration interface; this declares a function to which the Core will pass IModuleConfiguration instances; the user can cast these to the writeable configuration classes in order to set the properties. Arbitrary code can be executed here, e.g. searching for header files, or running an executable. This code is executed just before the Modules Init() function. See the ConfigurationTest1 test case.

======== End of v1.0 releases ========































07-Apr-2017 ======== Version 1.0.5 Release ========

15-Mar-2017 ======== Version 1.0.5 beta 1 Release ========

11-Mar-2017 Fixes #308. Version check for the BAM assembly required (as specified in package definition files) no longer gives 'major', 'minor', and 'patch' the same precedence, i.e. v1.0.2 was incorrectly considered more recent than v1.1.0, as the patch value was greater in the former.

01-Mar-2017 ======== Version 1.0.4 Release ========

17-Feb-2017 Fixes #305. Added Publisher.StrippedBinaryCollation.Include<>(), to allow additionally built files, e.g. documentation, to be added to the final published collation before installers. This could happen, say, if the documentation generation depended on a runnable executable, made by the initial publishing step.

16-Feb-2017 ======== Version 1.0.4 beta 3 Release ========

16-Feb-2017 Fixes #302. The Xcode publishing logic was incorrect when the 'reference' (i.e. executable to publish) was not in the top level package, and other modules in the reference's package needed to be published beside it.

16-Feb-2017 Fixes #301. Corrected error message when a Settings interface did not implement a Clone extension method, but the Settings needed to be cloned (for creating delta settings).

15-Feb-2017 Fixes #300. C.ProceduralHeaderFile and ProceduralHeaderFileFromToolOutput have had their public patches extended to support C.ICommonAssemblySettings.

15-Feb-2017 Fixes #299. Added support for assembler tools in the C package. Assemblers have been provided for VisualC on Windows (ml, ml64), Clang on macOS (clang), Gcc on Linux (gcc), and Mingw on Windows (mingw-gcc). Native, VisualStudio, MakeFile, and Xcode support is provided. Note that the class C.ObjectFile has been split, into C.ObjectFileBase (the base class for different types of ObjectFile), C.ObjectFile derives from ObjectFileBase and continues to be the output from a compilation step, and C.AssembledObjectFile is new and also derives from ObjectFileBase. Custom builder scripts, if previously casting to C.ObjectFile to get access to properties, may now have to cast to C.ObjectFileBase if assembly source files are included in the build.

12-Feb-2017 Fixes #298. When the Target name differed from the executable name in Xcode, a duplicate Scheme was created in order to debug it (same name but with a '2' suffix). This was due to a misconfigured LaunchActions in the Xcode scheme configuration generated by BAM.

11-Feb-2017 Fixes #201. When publishing a module (B) relative to another (A), B is now added as an order-only dependency to A. This ensures that the dependency graph is accurately reflected in IDE builds.

03-Feb-2017 Fixes #297. C/C++ static library archiving and binary linking may now perform additional timestamp checks on source files to ensure they are up-to-date in Native builds. This covers an edge case of failing to archive or link in incremental builds, when all dependent source files had been compiled in a previous build. The repo case for this is an SCM update of a number of source file in static libraries and applications, and compilation of all static library source is completed, but the application source fails to compile, and the static libraries are not re-archived; a subsequent build correcting the compilation error will result in link errors because the static libraries are still out of date.

04-Jan-2017 ======== Version 1.0.4 beta 2 Release ========

03-Jan-2017 Fixes #295. Handle HeaderLibrary modules during MakeFile dependency analysis.

03-Jan-2017 Fixes #294. Rewrote recursive functions to determine all libraries to link, that had significant performance cost during module construction. Calculations are now performed just before the link step, rather than for each module. The rewrite is still recursive, in order to find all dependents (e.g. when a static library depends on another static library, both need to be linked), but occurs on the final list of libraries (rather than incrementally, and thus repeatedly for common dependencies), and only when absolutely needed. This is for single pass linkers, e.g. gcc, but is applied for all toolchains.

23-Nov-2016 Fixes #293. Added GccCommon.ICommonLinkerSettings.VersionScript property, a Bam.Core.TokenizedString, defaulting to null. If set to an existing file path, then this is passed to ld as a version script. Added C.VersionScript abstract class, as a baseclass module helper for creating version scripts. There is no implementation for determining the exported symbols to list in the version script as it will vary between projects; instead a derived class should implement the Contents property to write an appropriate version script. The dynamic library module can then depend on the module derived from C.VersionScript.

07-Nov-2016 Fixes #291. Xcode publishing of OSX frameworks with helper application bundles no longer duplicate the bundle leafname.

07-Nov-2016 Fixes #292. Native build mode publishing of OSX frameworks including helper application bundles no longer duplicate the bundle leafname in stripped collation.

28-Oct-2016 Fixes #77. Installer.ITarBallSettings now supports a TransformRegEx string property. When set, the --transform option is passed to tar, allowing transformations of incoming paths to archived paths. Using a reg-ex of "'s,^.,somethingelse,'" essentially prefixes all paths starting with . with a directory 'somethingelse' instead. Thus, extracting the tar no longer extracts into the current directory. Note that the tar utility's --transform option is NOT supported on OSX.

08-Sep-2016 Xcode Target.EnsureFileOfTypeExists() now accepts an optional argument to say that the file type is not explicit, i.e. it is then a lastKnownFileType. Defaults to true (type is explicit), as was previous behaviour.

08-Sep-2016 Xcode FileReferences now include the Text type.

25-Aug-2016 ======== Version 1.0.4 beta 1 Release ========

25-Aug-2016 Fixes #90. HeaderLibraries are now considered for forwarded dependencies when required by another HeaderLibrary or StaticLibrary. This captures any dependents on that HeaderLibrary which are required by a future link step.

25-Aug-2016 Issue #90. Added test HeaderLibraryTest2, to exercise a header library having a dependency on a static library, and an application then uses the header library. The static library dependency must be forwarded to the application link step.

23-Aug-2016 Fixes #285. VisualStudio solution files now embed a format version number dependent on the VisualC package used.

23-Aug-2016 Fixes #286. C.ICommonCompilerSettings.SystemIncludePaths are now honoured in VSSolution build mode. These are merged into any C.ICommonCompilerSettings.IncludePaths, with non-system paths appearing first (consistent with Native build mode behaviour).

23-Aug-2016 Issue #14. Paths that are in the special folders (c:\Program Files or c:\Program Files (x86)) are no longer translated to relative paths in VisualStudio projects.

21-Aug-2016 Fixes #171. Enabled Xcode minimal changes on incremental BuildAMation builds, so that only projects that have changed contents are rewritten. This has been enabled due to the fix to issue #222 for deterministic UUIDs used in Xcode projects.

21-Aug-2016 Collapsed LINQ queries of the form .Where(<expr>).FirstOrDefault() to .FirstOrDefault(<expr>).

21-Aug-2016 Fixes #222. Xcode project object UUIDs now use a different algorithm to create them (96-bit hexadecimal values), but also use the construction arguments of each type of Object to both make the UUID unique in the project, but also make them deterministic. Generating the same project will therefore yield an identical project file.

19-Aug-2016 Issue #14. Xcode projects now have the majority of paths written as relative to the project file, where appropriate. Some paths that have yet to be converted are those in custom build rules.

19-Aug-2016 Fixes #287. Xcode cross-project target dependencies now write the correct number of PBXContainerItemProxy elements into the project file. Project references are now written.

19-Aug-2016 Fixes #108. Xcode's EXCLUDED_SOURCE_FILE_NAME list appears to be satisfied with just leafnames. This of course does assume that there are no duplicate leafnames in different directories in the source.

18-Aug-2016 Issue #14. VisualStudio projects now have the majority of paths written as relative to the project file, where appropriate. Some paths that have yet to be converted are those in pre and post build commands.

12-Aug-2016 Fixes #284. If there were very sparsely distributed rank indices as mentioned below, the progress updates would stall during module dependency analysis. The stall has been removed, but there was unmetered progress that is now fixed.

12-Aug-2016 Fixes #284. The dependency sorting algorithm introduced in v1.0.2 (issue #236), although faster, introduced an ordered list of (module,rankindex) pairs where the rank indices may be sparsely distributed. This resulted in a structure on the dependency graph that could have empty collections of Modules. Thus, although the order of modules is correct to satisfy dependencies, redundant processing was occurring on those empty ranks. This change filters out any gaps between rank indices in the data, so that there are no empty Module collections, and final rank indices are contiguous, so there is no wasted processing during dependency graph evaluation.

12-Aug-2016 Fixes #283. VisualStudio projects now honour header files in specific configurations.

11-Aug-2016 Fixes #282. Dependencies on VisualStudio projects that are specific to a configuration are now honoured in the .vcxproj and .sln files. Note that this is breaking change in the API for VSSolutionBuilder.VSProject. Dependent projects must now be made dependent on the project configuration, not just the project.

02-Aug-2016 ======== Version 1.0.3 Release ========

26-Jul-2016 Fixes #257. If a shared object symlink is missing, an incremental build will regenerate it.

12-Jul-2016 ======== Version 1.0.3 beta 3 Release ========

12-Jul-2016 Fixes #260. C module classes that depend on object files (e.g. object file collections, static libraries, applications/dynamic libraries) now also check whether any of the object files do not exist, as well as are newer. In Native builds, this ensures that the module that already exists, is re-executed, when a new source file is added to it.

10-Jul-2016 Fixes #279. The string indexer on C.CModuleContainer, used to identify individual source files (generally for subsequent settings patching), now throws an exception when there is no match for the filename provided.

01-Jul-2016 Fixes #275. Added BuildStartTime property to Bam.Core.ProcessState, as the time that the BAM process was launched (type System.DateTime). Retrieve this through Bam.Core.Graph.Instance.ProcessState.BuildStartTime. This is intended as a potentially useful piece of information that can be used alongside IProductDefinition.

01-Jul-2016 Fixes #278. VisualCCommon conversions of the C.ICommonLinkerSettings now honours the Bits property, converting it to the MACHINE linker option (both command lines and .vcxproject settings).

01-Jul-2016 Fixes #277. WindowsSDK packages now depend explicitly on the VSSolutionBuilder package, for the scripts implementing the resource compiler.

01-Jul-2016 Fixes #276. Two static libraries with cyclic dependencies are not detected with the Bam.Core.Module.DependsOn check, because there is no explicit dependency on them (it is deferred until link time). Added a static library specific check for cyclic dependencies. Added CyclicDependenciesTest2, that will fail, to test for this.

01-Jul-2016 Fixes #276. Bam.Core.Module.DependsOn now checks for cyclic dependencies, and will throw an exception if found. Added CyclicDependenciesTest1, that will fail, to test for this.

30-Jun-2016 ======== Version 1.0.3 beta 2 Release ========

29-Jun-2016 Fixes #274. VisualStudio projects are now aware of resource files per configuration.

29-Jun-2016 Fixes #259. Generation of Windows version resource file now uses any data in the implementation of a Bam.Core.IProductDefinition in the package assembly.

29-Jun-2016 Fixes #273. Added Bam.Core.IProductDefinition, and an accessor on Bam.Core.Graph.ProductDefinition. At most one implementation of an IProductDefinition should be present in a package assembly. Properties on the interface are, Name (of product), MajorVersion, MinorVersion, PatchVersion (assuming semantic versioning), IsPreRelease (boolean), copyright notice, company name.

29-Jun-2016 Fixes #272. Added VisualCCommon.ICommonLinkerSettings.GenerateManifest boolean option, defaults to true. Can be used to avoid an error if a resource file refers to an external manifest file.

29-Jun-2016 Issue #259. C.ProceduralHeaderFileFromToolOutput and VisualCCommon.Compiler's public patches now also try to add include paths onto settings classes implementing the C.ICommonWinResourceCompilerSettings interface.

29-Jun-2016 Issue #259. Added attribute C.Thirdparty, which optionally accepts a path to a Windows .rc resource file. If the path is set, then this is used instead of generating an .rc file for versioning. This is to allow builds of thirdparty software to use their own versioning.

29-Jun-2016 Issue #259. Updated examples with dynamic libraries to define major, minor, and patch versions (to match the BuildAMation version), and define a Description macro to use in Windows versioning resource files.

29-Jun-2016 Issue #259. Only the MajorVersion macro on a binary is assumed valid for Windows .rc versioning. MinorVersion and PatchVersion can be missing; if so, they will fallback to 0.

29-Jun-2016 Issue #259. Prebuilt binaries are not considered for a versioning .rc file on Windows.

29-Jun-2016 Bam.Core.MacroList's constructor now accepts an optional name of the object owning it. This is only used in diagnostic messages. The API has not changed, as a default value is provided.

29-Jun-2016 Fixes #259. All C binaries (applications, DLLs, plugins) now automatically generate an .rc (resource) file containing versioning information for that file. The macros 'MajorVersion', 'MinorVersion', 'PatchVersion' as already used in Linux and OSX, are used to generate the data. If a macro 'Description' exists on the binary module, this is used in the 'FileDescription' field in the generated .rc file. The current culture and codepage on the build machine are used to define the default language/codepage used in the .rc file. (Currently, automatic generation of different translations are not supported.)

29-Jun-2016 Issue #259. Windows resource modules now accept include paths on the settings interface, C.ICommonWinResourceCompilerSettings.

29-Jun-2016 Fixes #270. Changed the dynamic library extension in Mingw to .dll (was .so), to match the online documentation at https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/4/html/Using_ld_the_GNU_Linker/win32.html.

29-Jun-2016 Fixes #269. The TokenizedString pre-function, #valid, now accepts an optional second argument. The syntax is now #valid(expr[,fallback]). Previously, if expr was not valid, an empty string was replaced. Now, if fallback is provided, this is used instead of an empty string.

28-Jun-2016 Fixes #268. MingwCommon.ICommonCompilerSettings now has a precedence set, in order for the warning enabling settings to appear before warning suppressions.

28-Jun-2016 Fixes #267. Added 'ChangeDefaultSettings' test case, which exercise Bam.Core.ISitePolicy, to modify the defaults of any settings class from any package. If individuals or companies use this, then they can globally set the defaults to use for all projects, avoiding needing to patch each and every module.

27-Jun-2016 Fixes #264. Site policies in 'tests' sub-namespaces of packages are only considered in test mode (-t/--tests on the command line).

27-Jun-2016 Fixes #266. Checks for multiple classes in the compiled package assembly implementing Bam.Core.ISitePolicy has been moved to directly after package compilation. Previously this was after module creation, so if there were many modules and more than one site policy, there was a delay before the error was seen.

27-Jun-2016 Fixes #265. Utility functions, such as CompileAgainst etc, in the C and Installer packages have been updated to cope with dependent modules not existing. For example, if a dependent module is filtered on some platforms, and yet the build script that depends on it is written in a platform agnostic way, these functions need to perform a nullop.

25-Jun-2016 Fixes #262. Override the macro 'ImportLibraryName' to change the leafname of the import library of the DLL. This allows it to be different to the DLL name (the macro 'OutputName'). The default import library name matches the DLL name.

25-Jun-2016 Fixes #261. VisualC Native dynamic library builds now specify the path of the import library on the linker command line. VisualStudio projects generated for DLLs already did this.

23-Jun-2016 Fixes #244. Added the Bam.Core.TokenizedString property WorkingDirectory to C.ConsoleApplication (DynamicLibrary and Plugin derived classes throw an exception). VisualStudio and Xcode projects now use this in the project settings. Thanks to @joshmartel for the suggestion on how to implement this. As a side-effect in Xcode, the command line option --Xcode.generateSchemes, has been removed, as it is requirement to set the working directory.

18-Jun-2016 Fixes #258. WindowsSDK-10 package no longer causes a compilation failure in mono due to an errant throw after an unconditional function return.

09-Jun-2016 ======== Version 1.0.3 beta 1 Release ========

09-Jun-2016 Fixes #253. Modules can now throw an exception of type Bam.Core.UnableToBuildModuleException. For any other modules depending on such failing modules, these will also fail. A special case of this is a plugin. A plugin is a runtime-only dependency so, in theory, the primary application using the plugin can run (with limited features) without the plugin. As such, C.ConsoleApplication.RequiredToExist, and Publisher.Include, have been modified to detect the UnableToBuildModuleException, and ignore the dependency (with a warning to the console). A test, MissingDependencyTest1, has been added to exercise this functionality.

09-Jun-2016 Fixes #252. Added progress information for Bam operations. This requires console cursor management support on the terminal that Bam is executed in. If no support is provided, no progress is displayed. The output under "Creating modules" is a tally of the number of modules created (the total is not known in advance). For the other steps in the Bam build, a percentage complete is shown, from 0 to 100%. Note that this does have a minor impact on performance.

09-Jun-2016 Fixes #251. Mono 4.4 on OSX is now delivered as universal binaries, for both 32-bit and 64-bit support (previously was only 32-bit). Check if 64-bit hardware is available, and add --arch=64 to mono in such cases. See http://www.mono-project.com/docs/about-mono/releases/4.4.0/#bit-mono-for-os-x.

09-Jun-2016 Fixes #249. Bam.Core.Module.GetEncapsulatingReferencedModule() has been simplified. It is no longer recursive, nor relies on a module having been added as a dependency. Instead it reuses information that had already been gathered in the Bam.Core.Graph during dependency graph population to identify the encapsulating module for every module.

09-Jun-2016 Fixes #250. Test harness now defines what are valid options for configurations, bitdepth and build mode.

18-May-2016 ======== Version 1.0.2 Release ========

18-May-2016 Fixes #246. Added synchronization for more Xcode generation functions.

10-May-2016 ======== Version 1.0.2 beta 3 Release ========

09-May-2016 Fixes #192. Bam.Core now exposes IOWrapper.CreateDirectory and IOWrapper.CreateDirectoryIfNotExists functions, which wrap around System.IO.Directory.CreateDirectory (and System.IO.Directory.Exists for the latter), but which importantly re-throw any exceptions caught from directory creation and includes the failing path in the exception message, which the System methods do not.

08-May-2016 Issue #233. Using LINQ's FirstOrDefault, instead of Where as well, to identify existing Bam.Core.PathKeys.

08-May-2016 Issue #233. Using LINQ's FirstOrDefault, instead of Where as well, to identify the package definition used for each Module created.

08-May-2016 Issue #233. Using LINQ's FirstOrDefault, instead of Where as well, to find packages with metadata attributes to create, and retrieve.

08-May-2016 Issue #233. Using LINQ's First and FirstOrDefault, instead of Where as well, to identify any 'default' package versions marked in the master package definition file.

08-May-2016 Issue #233. The --showdefinition command now just uses LINQ's First function, rather than Where followed by First.

24-Apr-2016 Fixes #240. Updated the format of the table of task profiles at the end of the --stats output to make it easier to read.

24-Apr-2016 Issue #233. Bam.Core.Graph.FindReferencedModule now uses just LINQ's FirstOrDefault, rather than Where, followed by FirstOrDefault.

24-Apr-2016 Fixes #239. XML reads of package definition files now use the same reader settings (constructed once), without cloning, with validation always enabled (as it was by default previously, but was optional), and no repeated path combining for each definition file read to generate the same path (to the Bam schema).

24-Apr-2016 Issue #233. Bam.Core.Graph.Validate now uses fewer LINQ calls to validate the dependency graph.

24-Apr-2016 Fixes #238. Bam.Core.Graph.MakeModuleOfType now both compiles a generic method (generic type is the Module type found through reflection), and caches that compiled function for reuse. This reduces the cost of using the same module type over and over (likely for things like source files and object files).

24-Apr-2016 Fixes #237. On a build with multiple packages each referring to a common set of package repositories, directory enumeration was occurring repeatedly, incurring a performance penalty. Also, a directory structure containing packages in different subdirectories also tries to only scan (recursively) the parent directory, rather than both the parent and required subdirectories, redundantly.

22-Apr-2016 Fixes #236. Using a new algorithm to sort module dependencies, that eliminates redundant re-processing of modules in the dependency graph. This should be a reasonable performance gain for projects with many modules.

22-Apr-2016 Fixes #235. Bam.Core.TokenizedString now has separate caches for verbatim strings, strings using macros from a particular module, and strings that don't use a module but have positional arguments, in order to reduce n in the O(n) search for identical strings.

21-Apr-2016 Fixes #232. Changed Core timing code to use System.Diagnostics.Stopwatch rather than System.DateTime.Now, as the former can make use of a high resolution timer if hardware supports it, or falls back to the system clock which DateTime.Now uses. Mono appears to have a high cost to the first call to any timer (although any number can be created afterwards), so this is pre-empted in a static constructor. Because of this change, the output of --stats is now different, as there is no start/end time to each profile taken.

21-Apr-2016 Fixes #231. Extended the --stats command line option to display the creation times of all named/referenced/encapsulating modules for each configuration built, as an aid for high level profiling.

20-Apr-2016 Fixes #230. If a C module container is constructed with wildcards, a fairly long sequence of commands, including LINQ, is needed to identify an individual (or group) of modules for compiled source files, given a filename. To avoid having to repeat this everywhere, a string indexer has been added to C.CModuleContainer, returning a list of object file modules whose source file matches the filename supplied. For example, if var source = this.CreateCxxSourceContainer(...); then all matching object file modules with the source file foobar.c can be found with source["foobar.c"]. The ForEach function can then be used on this to apply changes per module, for example, apply a private patch to change the compilation options on a single source file out of many.

20-Apr-2016 Fixes #229. If Bam.Core.Module.ClosingPatch was applied to a container of modules, it was not applied to any of its child modules.

20-Apr-2016 ======== Version 1.0.2 beta 2 Release ========

18-Apr-2016 Fixes #228. Added Bam.Core.Module.ClosingPatch. This is a patch using the same delegate as a private patch, but is guaranteed to be executed after all other patches, i.e. so that the Module's Settings object is in its final state (i.e. just before the settings are converted to a command line or project file). Only a single closing patch is possible per module. This allows some logic on the final settings to be evaluated, such as to set a macro to be used in other TokenizedStrings (since they are expanded after patches are evaluated), or to modify a setting (e.g. add a preprocessor define based on other settings).

16-Apr-2016 Fixes #227. Added Bam.Core.PackageDirectoryRedirectAttribute, an attribute associated with an assembly, requiring a package name, an optional package version, and a redirected path. By default, the macro $(packagedir) is the directory containing the 'bam' folder. Should the source code for a package reside in a different location to that directory, this attribute can be placed anywhere in the compiled code for your packages, and the macro $(packagedir) is redirected to the specified path for that package. The redirect path can either be an absolute path, or a path relative to the directory containing the 'bam' folder. Such attributes could be placed in project specific locations, independent of package definitions. Modified the ProxyTest test package to demonstrate.

15-Apr-2016 Fixes #225. Specifying a package version override on the command line, which does not match the unique package version contained in all the definition files, will now report an error, rather than using the unique package version. For example, if VisualC-12.0 is the only version of the package in all definition files, but --VisualC.version=14.0 was on the command line, this now causes an error rather than just using 12.0.

14-Apr-2016 Fixes #224. Xcode PBXBuildFiles (roughly analogous to an object file) had a 1-1 relationship with a PBXFileReference (roughly analogous to a source file). However, source files that are shared by different targets cannot have per-target compilation settings. So PBXBuildFiles are now unique per-filereference per-target. Extended the EmbedStaticIntoDynamicLibrary to exercise this.

12-Apr-2016 Issue #171. Infrastructure in place for minimizing rewriting Xcode projects, similar to the VisualStudio change, except that Xcode GUIDs are currently non-deterministic. A new issue has been created to address that. Until then, minimized rebuilds for Xcode project files is disabled.

12-Apr-2016 Issue #171. If VisualStudio projects, filters and solution files already exist from a previous Bam build, and a non-clean build is performed, only those files that are different to what is already on disk are written back. On large projects this significantly reduces the reload time in the VisualStudio IDE when the change to the Bam build scripts has only a small influence on the project files. If more than one thread is used to generate a VisualStudio project, i.e. -j=N, where N==0 or N>1, then project files with build events may be rewritten if the commands within the build events occur in a different order.

12-Apr-2016 Fixes #221. OSX DynamicLibraries and Plugins now default to using an install name of @rpath/libname, rather than @executable_path/libname. OSX applications (not dylibs nor plugins) now have a default RPath of @executable_path/, to balance out the install name change for basic applications. Using @rpath is a more flexible method for being able to identify where dylibs have been installed. Note the trailing / on the default RPath, which appears necessary for OSX < 10.10.

12-Apr-2016 Fixes #220. Removed unused argument 'validatePackageLocations' used during reading package definition files. To avoid function ambiguity, one of the Bam.Core.PackageDefinition.Read functions has been renamed to ReadInternal and made private. To perform a read on an existing PackageDefinition object, call the Read() function (no arguments required).

12-Apr-2016 Fixes #219. The minimum version of Bam assemblies specified by package definition files are now only checked for just those packages used to compile into an assembly. Previously, all packages found on all inspected repositories were checked, which could result in false positives.

11-Apr-2016 ======== Version 1.0.2 beta 1 Release ========

11-Apr-2016 Fixes #209. Xcode generation now supports identifying .tbd files, new in Xcode 7, which are text based dylib definition files. The LinkPrebuiltLibrary exercises this when targeting Xcode7.

11-Apr-2016 Fixes #218. Removed unused code from Bam.Core.TimingProfileUtilities that had been identified by Coverity scan.

11-Apr-2016 Fixes #217. Fetching the rank of a ModuleCollection from the Bam.Core.DependencyGraph used a comparison for a default System.Collections.Generic.Dictionary<int, ModuleCollection> which Coverity scan identified as logically dead code (equivalent to null, even though that doesn't compile), suggesting all ModuleCollections should have a valid rank index (which isn't true). Regardless, the code has been tidied up to eliminate ambiguity.

11-Apr-2016 Fixes #216. In Bam.Core.Settings.InitializeAllInterfaces, refactor so that cached interfaces for each module type are both stored and extracted under a synchronization lock. Coverity scan previously identified that a potential data race existed, as the indexer was used outside of the lock.

11-Apr-2016 Fixes #215. In Bam.Core.Module.CloneWithPrivatePatches, check the return value from Module.Create before dereferencing it. This is an unlikely scenario, as the source module of the same type already exists, but was identified in static analysis from Coverity scan.

11-Apr-2016 Fixes #214. Simplified checks for a valid timing profile, displayed with --stats. Fixes an ordering issue found by a Coverity scan.

10-Apr-2016 Fixes #213. Removed Bam.Core.XmlResolver class. It was only used to resolve the relative pathname to the schema, which can be specified on the XmlReaderSettings in a much simpler way. Also resolves a resource leak identified by a Coverity scan.

10-Apr-2016 Fixes #212. Wrapped System.Threading.CancellationTokenSource in a using block to fix the resource leak identified by a Coverity scan.

10-Apr-2016 Fixes #210. Add support in make_release.py to generate a build using the Coverity static analysis tools.

10-Apr-2016 Fixes #211. Cleaned up make_release.py script to accept a git tag, and optionally a version number.

09-Apr-2016 Fixes #208. Address performance issues identified by SlimTune in generating file filters for VisualStudio projects. A large project tested (a solution with 99 projects) showed a 50% reduction in time spent executing the dependency graph afer this change.

08-Apr-2016 Fixes #207. Added predication on the settings type in VisualCCommon.Compiler's PublicPatch for C.ICommonCompilerSettings. This would have resulted in a Null reference exception if applied to any module Settings class that doesn't implement that interface. This could happen for procedurally generated source files with custom Settings.

07-Apr-2016 Fixes #205. Mingw now also supports the C.Cxx.ELanguageStandard.GnuCxx98 mode.

06-Apr-2016 Fixes #204. C.ICommonLinkerSettings.Libraries are now honoured in Xcode projects. Since Xcode projects require full paths to libraries, library search paths are searched to find each library. If they are not found, SDK library paths are searched. If the library is not found, then an exception is raised.

06-Apr-2016 Issue #204. Added test LinkPrebuiltLibrary, to exercise linking libraries that already exist, and aren't built as part of a Bam build.

06-Apr-2016 Issue #197. CModuleContainer.ExtendWith now identifies any cloned object files with sources that implement Bam.Core.ICloneModule. This is to identify cases where the source file has been procedurally generated, and thus also requires cloning, so that the source generation is also merged into the module ExtendWith was invoked on.

06-Apr-2016 Issue #197. Added a new parameter to Bam.Core.Module.Create, postInitCallback, of type Bam.Core.Module.PostInitDelegate. This is similar to the PreInitDelegate, but invoked after the Module's Init function is called. This is also now an optional parameter to CloneWithPrivatePatches. This is to allow custom configuration of Module data.

06-Apr-2016 Issue #197. Added Bam.Core.ICloneModule, which modules can implement if Bam.Core.Module.CloneWithPrivatePatches is insufficient. For example, if the module has properties that must be assigned in a particular order.

05-Apr-2016 Issue #197. Added new test, EmbedStaticIntoDynamicLibrary, to exercise ExtendSource and ExtendSourcePublicly.

05-Apr-2016 Issue #197. Added ExtendSource and ExtendSourcePublicly functions to ConsoleApplication and DynamicLibrary (both C and C++ flavours), that allow containers of object files to be extended. This allows source to be grouped into a separate container module, and then merged into concrete modules. This is a mechanism analogous to linking a static library into a dynamic library, in a cross-platform environment and without any limitations of the current toolchain. ExtendSource will use any public patches on the standalone container for build only, while ExtendSourcePublicly will additional forward the patch to any callers.

05-Apr-2016 Issue #197. Added Bam.Core.Module.CloneWithPrivatePatches, which clones an existing module (matching its type), but also copies any private patches applied to that module, and its parent container. This is part of merging source containers. No copying of public patches is performed, as this is dependent upon the context.

05-Apr-2016 Issue #197. Bam.Core.Module.ApplySettingsPatches now honours any PrivateInheritedPatches from a parent container module. This can be the case where source containers are merged.

05-Apr-2016 Fixes #203. Updating version numbers in the make_release script no longer swallows stdout messages if an exception occurs.

05-Apr-2016 Fixes #202. Generating API documentation now updates the version number.

05-Apr-2016 ======== Version 1.0.1 Release ========

05-Apr-2016 Doc packages are now titled 'apidocs' to be clear what they contain.

02-Apr-2016 Fixes #190. Addendum: Xcode projects with no build output (e.g. those that just copy headers) cannot be added as a target dependency (i.e. an order dependency) due to limitations of how target dependencies are managed in Xcode projects.

01-Apr-2016 Fixes #122. Another update to Xcode support for copying files, such as for copying headers for a public API, in which the subdirectory is not needed. (This is now consistent with the VSSolution builder code.)

01-Apr-2016 Fixes #200. C.SettingsBase.SharedInterfaces, which is invoked to determine the intersection of settings interfaces for all source files of a library or application in an IDE project build, was ignoring the precedence (Bam.Core.SettingsPrecendenceAttribute), and could lead to interfaces being converted in an incorrect order, resulting in compilation failures. Such an example is for Clang, that has the AllWarnings property, that must be applied before any warning suppression, which is in another interface.

01-Apr-2016 Fixes #190. Xcode target dependencies (order only dependencies) are now deferred until the end of the build, since they require fully defined Targets, which may not be the case for any dependencies on static libraries.

01-Apr-2016 Fixes #199. The C link command in generated MakeFiles now filters prerequisites for object files, since dependent libraries would be specified more than once otherwise.

01-Apr-2016 Updated error message if a module is attempted to be created after a build has started.

01-Apr-2016 Fixes #198. Modules can now specify a custom subdirectory string to apply after the 'moduleoutputdir' macro, by means of the CustomOutputSubDirectory property. By default this is null. C.ObjectFile overrides this as 'obj', C.ConsoleApplication as 'bin', and C.StaticLibrary as 'lib'. This is to avoid any collisions between the mirrored directory tree for object files and a final executable name. For instance, if an application module called FooBar has source files in a folder called FooBar under the package directory, Linux and OSX would previously have had a collision between the directory containing object files, and the executable name. This only happened for platforms where executables do not have an extension. This new property is intended to used by the per-build-mode function ModuleOutputDirectory; and currently in use in Native, MakeFile and VSSolution build modes. It is not used by Xcode, because Xcode projects are more limited in where output files can reside.

01-Apr-2016 Fixes #196. XcodeBuilder exposes Flex and Bison source file types (XcodeBuilder.FileReference.EFileType), and a function to add a source file of a particular type to a target (XcodeBuilder.Target.EnsureFileOfTypeExists). This is in support of the bam-parser repository (https://github.com/markfinal/bam-parser.git).

01-Apr-2016 Fixes #195. Failure to find a specific package now also reports which package requested it.

01-Apr-2016 Fixes #191. Failure to find a requested package repository now reports which package requested it.

01-Apr-2016 Fixes #193. Valid TokenizedStrings containing @, but which were not functions, e.g. OSX install names like @executable_path/../Frameworks threw an exception. This was an attempt to catch mismatching parentheses on a real function call. If a closing parenthesis is missing, an exception will be thrown due to .NET regex balancing groups being used. However, if an opening parenthesis is missing, this is not yet detected.

31-Mar-2016 Fixes #190. For VSSolution and Xcode build modes, C.StaticLibrary projects/targets did not have all necessary order-only dependencies, due to the internals deferring an explicit dependency until a link step using the static library. Inspecting these deferred dependencies in IDE project generation, allows order only dependencies to be added to ensure that all requirements in order to build a static library are enforced. This showed up in IDE projects in the case where a dependent of a static library wrote files necessary for the compilation of the static library. The Native build mode has a finer level of granularity of dependencies, and this issue was not present on that.

31-Mar-2016 Fixes #189. For VSSolution and Xcode build modes, non C.CModule dependencies (i.e. custom tools in the form of projects or targets) on C source containers are now translated to order-only dependencies. This can be useful for utility projects that copy headers for a public API.

31-Mar-2016 Fixes #188. C's LinkAgainst and LinkPubliclyAgainst did not include forwarded libraries on the dependent module, inconsistently with similar functions CompileAndLinkAgainst and CompilePubliclyAndLinkAgainst. The result was potential unresolved symbols during the link.

29-Mar-2016 Fixes #187. C's DynamicLibrary and Cxx.DynamicLibrary module function LinkPubliclyAgainst() did not forward the dependent onto callers of the dynamic libraries. This may be required in some multi-module software systems that have interdependencies.

29-Mar-2016 Fixes #185. Binary builds of BuildAMation are now tagged as 'AnyCPU' to be clear that they are not tied to a specific platform architecture.

29-Mar-2016 Fixes #184. Regression introduced in v1.0.1 beta 5 in VisualC 2015 support for finding C standard library headers, which are in the WindowsSDK 10.

25-Mar-2016 ======== Version 1.0.1b5 Release ========

25-Mar-2016 Fixes #181. POTENTIALLY BREAKING CHANGE. Clarified the use of the 'public' utility functions in the C package. The CompilePubliclyAndLinkAgainst function has moved from C.ConsoleApplication to C.DynamicLibrary and C.Cxx.DynamicLibrary to enforce that 'public' inheritance of patches to dependents are not necessary for executables, but are for dynamic libraries. Added LinkPubliclyAgainst to C.DynamicLibrary and C.Cxx.DynamicLibrary. Added Bam.Core.Module.UsePublicPatchesPrivately, which takes the public patches from a dependent, but only applies them to the build of the current module, rather than forwarding them to any future dependees. Added more documentation to Bam.Core.Module regarding the application of patches. The likely changes to make to existing build scripts is to change CompilePubliclyAndLinkAgainst to CompileAndLinkAgainst in C.ConsoleApplication to C.GuiApplication (particularly for WindowsSDK), or that modules were previously compiling because patches had been leaked through prior to this change.

25-Mar-2016 Fixes #182. When the C# assembly for all the packages in a build fails to compile, an improved error message is now displayed, hinting at using the command line option in bam for enabling debug symbols, and the option to generate a debuggable project in one of the applicable IDEs (VisualStudio/Xamarin Studio/MonoDevelop).

25-Mar-2016 Fixes #180. C.DynamicLibrary and C.Cxx.DynamicLibrary that identify dynamic library dependencies with CompilePubliclyAndLinkAgainst now forward those dependencies on, just like how StaticLibraries already do. If the public API in dynamic library D is exposed in the public API of dynamic library E, then it is legal for a compilation step dependent on D to invoke calls in E that were not resolved during D's link. This change simplifies writing build scripts in that transient dynamic dependencies no longer need to be manually specified.

24-Mar-2016 Fixes #179. Removed the 'frameworks' argument from the C.ILinkingPolicy.Link function, as it is never used. Passing OSX frameworks to the linker is performed via the setting in C.ICommonLinkerSettingsOSX.

24-Mar-2016 Issue #174. Classes deriving C.LinkerTool now requires the overload of the new abstract method, GetLibraryPath, accepting a C.CModule argument.

24-Mar-2016 Fixes #178. Added Bam.Core.ExecuteReasoning.EReason.DeferredEvaluation, and utility function Bam.Core.ExecuteReasoning.DeferredUntilBuild, which can be used to identify modules that must defer their evaluation until after the build starts, e.g. those modules that rely on part of the build to generate their data. It is up to the policy writers of the build mode to handle deferred evaluation.

23-Mar-2016 Fixes #174. Added C.ProceduralHeaderFileFromToolOutput module, requiring a module implementing Bam.Core.ICommandLineTool, whose stdout is captured and used as the contents of the generated header file. Supported in all build modes.

23-Mar-2016 The CommandLineProcessor.Execute overload taking an executable path, now defaults to no command line arguments.

23-Mar-2016 Fixes #175. Bam now throws different exceptions to distinguish between a package with no modules defined, a package used as master but no modules are buildable (i.e. their classes are sealed), and when buildable modules fail to be instantiated.

23-Mar-2016 Fixes #166. Python test harness has a new option, --C.bitdepth, which can be 32 or 64, to limit build tests for those bitdepths. If no option is specified, then 32 and 64-bit builds will be tested, where supported.

23-Mar-2016 Fixes #148. Circular module references now result in an exception being thrown.

23-Mar-2016 Fixes #113. Speculative fix to synchronization issue with a multithreaded Xcode build seen just once.

23-Mar-2016 Fixes #103. Adding a dependent package using bam and the command line option, --adddependent, now validates that the package both exists (in the current list of package repositories in the definition file), and that there is no ambiguity over which version of a package was intended.

23-Mar-2016 Fixes #176. Added C.ICxxOnlyCompilerSettings.EnableRunTimeTypeInfo, defaulting to true, enabling RTTI during compilation. Supported by VisualC, Mingw, Gcc, Clang, in all build modes.

18-Mar-2016 ======== Version 1.0.1b4 Release ========

12-Mar-2016 Fixes #170. The CachedPackageAssembly directory written to the build root, containing the compiled assembly for the last build, is now hidden.

09-Mar-2016 Fixes #167. The attribute Bam.Core.EvaluationRequiredAttribute can now be applied to individual modules. Previously, it was only applicable to classes implementing Bam.Core.IBuildModeMetaData, i.e. defining the evaluation behaviour for the entire build mode. For project generation build modes, modules that perform tasks outside of the project, e.g. procedural file generation, should be always evaluated, so that they are not regenerated unnecessarily when the project is rebuilt (and not cleaned). C.ProceduralHeaderFile now uses the attribute to do just this, which reduces rebuild times after projects are regenerated.

03-Mar-2016 Fixes #169. Added Boolean setting property, EnableLanguageExtensions, to VisualCCommon.ICommonCompilerSettings. Defaults to true, since Windows.h does not compile without it, even with WIN32_LEAN_AND_MEAN defined.

03-Mar-2016 Issue #164. Mingw, Clang, and Gcc compiler properties, AllWarnings, ExtraWarnings, Pedantic, and StrictAliasing, command line conversion will now add the appropriate command when the properties are set to False.

03-Mar-2016 Issue #164. C.ICommonCompilerSettings.WarningsAsError command line conversion will now add the appropriate command when this property is set to False.

03-Mar-2016 Fixes #146. Making a new package writes the initial .cs file in bam/Scripts with \n EOLs on all platforms, to be consistent with other files written by Bam.

03-Mar-2016 Fixes #163. Added StrictAliasing property to MingwCommon.ICommonCompilerSettings. Defaults to true in optimized builds, false in debug. This is consistent with the same property defined for Clang and Gcc.

29-Feb-2016 Issue #162. Added VisualC-11.0 and VisualC-10.0 as non-default dependents to the test packages.

29-Feb-2016 Issue #162. Added limited support for VisualStudio 2010. Testing has only been performed on the Express edition, which 1) only has a 32-bit compiler (64-bit support is separate download), 2) does not contain redistributable runtime DLLs, 3) does not support solution folders. The professional edition may not have some of these limitations.

29-Feb-2016 Fixes #165. The improvement to multiple package resolution in issue #138 could lead to a situation where all references to a dependent package are removed from consideration. Such a case occurs when package A is not referenced by the master package, but only by different versions of a dependent package B. Suppose one version of B does not reference A, but that version is chosen for use. All references of package A are removed because the unused versions of package B are removed, leaving no reference to package A. The error report in this case was not useful, so this has been improved.

29-Feb-2016 Issue #162. VisualC.MetaData now exposes a Bam.Core.TokenizedStringArray property called RequiredExecutablePaths, that are added to the PATH environment variable to run all of the VisualStudio command line tools. In particular, this addresses VisualStudio 2012 storing mspdb*.dll in Common7/IDE while later versions store it in VC/bin.

29-Feb-2016 Issue #162. All versions of VisualC packages will now throw an exception if the installation directory for VisualStudio does not exist.

29-Feb-2016 Issue #164. Simplified compiler interface Intersect and Delta extension methods, by adding extension methods to each datatype used as properties in those interfaces, to performan intersection and complement operation on the data. This has not changed behaviour - just simplified the code for future improvements.

29-Feb-2016 Issue #162. Added VisualStudio 2012 support.

28-Feb-2016 Fixes #161. Added Boolean property, DoNotDereferenceTarget, to the Publisher.IMakeLinkSettings interface, defaulting to true. When used with symbolic links to directories repeatedly, this stops circular links from being created, as the existing symlink is not followed. In this context, it does require the Force property to be set to true (it is by default). On OSX, the circular link was created on the second build run where frameworks were published, causing a subsequent clean build to fail.

28-Feb-2016 Bam.Core.TokenizedStringArray and C.PreprocessorDefinitions now include Intersect and Complement functions, which simplify compiler settings code.

28-Feb-2016 Simplified settings code for compilers with the updated Bam.Core.StringArray.Intersect and Complement functions.

28-Feb-2016 Fixes #160. Removed obsolete Bam.Core.ISetOperations interface. This was used pre-v1.0.0 and pre-LINQ support. Only referenced in Bam.Core.StringArray, and now replaced with an improved version that works better with the Bam.Core.Array base class.

25-Feb-2016 Fixes #158. C.ProceduralHeaderFile does not write a header inclusion guard if the override to GuardString returns null.

24-Feb-2016 Fixes #157. Xcode custom shell scripts now fail the build if any commands run return a non-zero exit code. This uses 'set -e', which bash will exit immediately if any command executed fails.

24-Feb-2016 Fixes #156. Publisher.Collation exposes a read-only property, InitialReference, which is set to the first collated file, that is used as a reference point for all future objects to be collated. This information is useful to IDE project generation.

24-Feb-2016 Fixes #155. Scanning for #includes in C source files now implicitly searches the same directory as the source file for any headers. Since the compiler does not need that path explicitly added to the header search paths in order to find sibling headers, it is a valid path to scan for them.

24-Feb-2016 Fixes #154. Scanning for #includes in C source files no longer assumes a single space after #include. Zero or more whitespace characters are now accepted.

24-Feb-2016 Added some documentation for macros added to Core assembly objects.

24-Feb-2016 Issue #153. If a module is created with a parent (i.e. it's a child of a collection), then that module now has access to two new TokenizedString macros: parentmodulename, encapsulatedparentmodulename. The former is the 'modulename' macro of the parent. The latter is the 'modulename' macro of the parent's encapsulating module. These can be identical, if the parent is a referenced module. These macros are useful for path generation for procedurally generated source, in order to generate a unique path.

23-Feb-2016 Issue #122. Modifications to XcodeBuilder to generate a 'utility' project for cases of collating a prebuilt file. Xcode projects don't have an analogous target type to VisualStudio's utility, so a static library with no source files is used.

23-Feb-2016 Fixes #147. C.ObjectFiles that are not compiled are now still browsable in Xcode projects.

23-Feb-2016 Fixes #152. The linker in Mingw-4.8.1 now implements the C.ICommonLinkerSettingsWin interface, covering the subsystem and .def file.

23-Feb-2016 Fixes #151. Added ExportDefinitionFile property (type: Bam.Core.TokenizedString) to C.ICommonLinkerSettingsWin, defaulting to null. This is for the .def file. If this is set to a valid path, it is passed to the linker and the contents used as the list of exported symbols for the binary. If the value remains null, the linker will generate a .def file based on metadata on symbols in the code.

23-Feb-2016 Fixes #150. Needed to invoke Parse() on the Bam.Core.TokenizedStrings for RPath and RPathLink.

22-Feb-2016 Fixes #147. Added PerformCompilation boolean property to C.ObjectFile (and thus all derived types of object files). Default value is true. This is to allow the compilation of a source file to be disabled, and yet still appear in project files for browsing. Possible uses for this is for marking source files that are #included into other source files. This change adds VisualStudio support.

22-Feb-2016 Allow changing the header search path from C.ProceduralHeaderFile, by overriding the IncludeDirectory property.

17-Feb-2016 Fixes #145. Modules using the C package that have the [C.Prebuilt] attribute now contribute any headers into a non-buildable project in VisualStudio. This is useful for browsing the headers and intellisense-like features of the IDE. The interface Bam.Core/Interfaces/IBuildModeMetaData.cs has been extended with a read-only Boolean property CanCreatePrebuiltProjectForAssociatedFiles, which each build mode must implement, indicating whether there is support for such prebuilt un-buildable projects.

17-Feb-2016 Fixes #144. The TokenizedString post-function @relativeto(path,baseDir) will now return path if there is no common root found, rather than throw an exception.

16-Feb-2016 ======== Version 1.0.1b3 Release ========

16-Feb-2016 Fixes #138. Recursively resolving package version ambiguity has been improved. If a package A has two versions in a package definition file, and each version of A depends on a different version of package B (and these are the only references to B), then prior to this fix, resolving which version of A is used (e.g. on the command line, --A.version=..., or specify the default in the master package definition file), would not automatically resolve B, even though there is no ambiguity anymore. A concrete example of this issue occurred with the VisualC packages, which depend on different versions of the WindowsSDK packages; specifying --VisualC.version=X still required --WindowsSDK.version=Y prior to the fix.

16-Feb-2016 Fixes #143. VisualC-14.0 added to the test package definition files. VisualC-12.0 remains as the default.

16-Feb-2016 Fixes #142. All C/C++ source files in tests now use C style comments, since files may be compiled on a variety of different tools and different build settings, which may not support C++ style comments.

16-Feb-2016 Fixes #141. Before cleaning the build root (command line option -c|--clean), all files within it are stripped of the read-only attribute, to avoid an error occurring. Read-only files may have been introduced from a previous build using a collation module that preserved file attributes.

16-Feb-2016 Fixes #140. To support VisualStudio 2015 changes to the distributed CRT libraries, VisualCCommon.IRuntimeLibraryPathMeta has been altered, requiring code changes to any usage of it. The function MSVCR returning a Bam.Core.TokenizedString is now called CRuntimePaths and returns a Bam.Core.TokenizedStringArray. This is to accomodate VisualStudio 2015 now returning the VisualC runtime library (vcruntime140.dll) and the universal crt from the WindowsSDK 10 (ucrtbase.dll). To future proof any changes to the C++ runtime libraries, MSVCP returning a Bam.Core.TokenizedString is now called CxxRuntimePaths and returns a Bam.Core.TokenizedStringArray. The recommended usage of these functions is a foreach loop, and collate each path returned. See the Test5 or InstallerTest1 examples for an illustration.

15-Feb-2016 InstallerTest1 updated to build two sets of installers, one with C only dependencies, and one with C++ dependencies. This is mostly to exercise the publishing of CRT DLLs with an installer.

12-Feb-2016 Fixes #137. ToolsVersion attribute written into .vcxproj and .vcxproj.filters is now part of the VisualC metadata. VisualC-12.0 has .vcxproj ToolsVersion 12.0, while VisualC-14.0 has 14.0. Both have filters ToolVersion of 4.0.

12-Feb-2016 Fixes #136. Added WindowsSDK-10. Note that this also references files from the 8.1 SDK version as well. VisualC-14.0 depends on WindowsSDK-10.

12-Feb-2016 Fixes #135. Each VisualC-N package specifies its WindowsSDK as there is general coherence between versions. VisualC-12.0 specifies WindowsSDK-8.1. Only specify a WindowsSDK version in a master package if you wish to override this default.

11-Feb-2016 Fixes #123. Common directory names used in different contexts in paths used in Bam.Core.ModuleGroup are no longer identified as the same solution folder in VisualStudio.

11-Feb-2016 Fixes #134. Added Bam.Core.OSUtilities.WindowsProgramFilesPath and WindowsProgramFilesx86Path properties, which return the locations of the 'Program Files' and 'Program Files (x86)' (on 64-bit Windows, otherwise 'Program Files'). Updated VisualC-*, Installer, WindowsSDK packages to use the new API. Tools should now be successfully located on both 64-bit and 32-bit editions of Windows.

09-Feb-2016 Fixes #133. Clarified the terms of use of LimitedConcurrencyLevelTaskScheduler from https://msdn.microsoft.com/en-us/library/ee789351.aspx under the Microsoft Limited Public License (MS-PL.md). This code is used in the Core assembly, to control the number of threads in a build with the -j=N switch. This license is mentioned in the Bam command line output. The MS-PL license text is also distributed with BuildAMation. See Microsoft Developer Services Agreement (https://msdn.microsoft.com/en-us/cc300389.aspx), section 2b (Software on Documentation Portals) for details.

09-Feb-2016 Fixes #101. For all C module collections with compilable output, a new base class CCompilableModuleContainer is now used. This new class derives from the previous base class, CModuleContainer. This is due to the AddFile method in CModuleContainer not being compatible with a HeaderFileCollection, and so the class hierarchy has been split between compilable and non-compilable collections. An explicit C.HeaderFile module can now be added to a HeaderFileCollection using the AddFile method.

09-Feb-2016 Fixes #91. C container functions that accept multiple source modules (e.g. CompileAgainst, CompilePubliclyAgainst), have had their signatures slightly altered to ensure that at least one source module is passed. Additional source modules can be passed, but are now optional. This moves a runtime test to a compile time test.

09-Feb-2016 Fixes #92. Package XML definition files that do not satisfy the schema syntax now identifies the error by description and location on the terminal.

09-Feb-2016 Fixes #93. Feedback is now provided on the terminal when a package is successfully made.

08-Feb-2016 ======== Version 1.0.1b2 Release ========

08-Feb-2016 Fixes #132. Parsing C source files for header includes no longer tries to match whitespace between the quotes or angle brackets. Without that, any trailing inline comments containing quotes or angle brackets would be included in the regex match. (Assume header files containing spaces are the exception, rather than the rule.)

08-Feb-2016 Fixes #128. Added C.ProceduralHeaderFile abstract module class, which can be derived from to generate header files for a build. Properties that can be overridden are OutputFile (the header path), Contents (the contents of the header - the guard is automatically written), and GuardText (an optional override to the header inclusion guard, otherwise the basename of the header). The header is always generated as part of the bam build - it is not converted to IDE projects. Added test ProceduralHeaderTest1.

08-Feb-2016 Fixes #131. Parsing C source files for header includes now accepts both quotes and angle bracket syntax. Previously, only quoted paths were searched, since the assumption was that angle brackets were for system headers, and thus invariant.

08-Feb-2016 Fixes #130. BuildAMation already supports modules that implement the Bam.Core.IModuleGroup containing 'children' which are modules implementing the Bam.Core.IChildModule interface. This allowed dependencies to flow from parent to child. However, if a module implementing IChildModule, but with a different parent, was added as a dependency, it was ignored as a proper dependency (treated as just a child), resulting in an incorrect dependency graph. Parentage is now evaluated for all modules implementing IChildModule. The relevant case for this is when a procedurally generated header was added as a dependency on a source collection.

07-Feb-2016 Fixes #129. C.ELanguageStandard now exposes GNU89 and GNU99 standards. Default language standard remains at C89. The extensions are necessary to support some language extensions required by some projects.

06-Feb-2016 Fixes #127. Response files on Windows now escape back slashes.

06-Feb-2016 Fixes #126. Mingw tools now use response files for very long command lines.

06-Feb-2016 Fixes #125. Using the bam command line options to modify the definition file now honours the version set on existing referenced Bam assemblies in the definition file. Previously, the patch version on any referenced assembly was removed upon writing the updated file. New definition files (i.e. when making a new package) honour the full version of BuildAMation in use.

05-Feb-2016 Fixes #124. Any C container implementing AddFiles() can already accept a wildcarded path, e.g. /path/to/*.c to find all .c files in /path/to. In addition, it can accept a recursive search, /path/to/**.c, which finds all .c files recursively beneath /path/to.

05-Feb-2016 Clarified when C.CModuleContainer.AddFiles fails to find any files from the original System.IO.Directory.GetFiles call, or if the regex filter has been applied.

05-Feb-2016 Fixes #123. Bam.Core.ModuleGroup attributes can now specify a path (using forward slashes). VisualStudio solutions honour the directories as a hierarchy of solution folders.

05-Feb-2016 Issue #122. Modifications to VSSolutionBuilder to generate a utility project for cases of collating a prebuilt file. Note that there is no Xcode support for this at this time.

05-Feb-2016 Fixes #122. Allow arbitrary files to start off the Publisher collation, rather than just outputs from modules. Use Publisher.Collation.IncludeFile(path,subdirectory). This allows the Publisher.Collation module to be used for other tasks, such as copying sparsely distributed header files into a single location, to act as a public API. Added example, PublishingTest2, to exercise this.

28-Jan-2016 Fixes #118. Added Installer.IDiskImageSettings.ImageSize string setting. Defaults to '32m'. The string should be sensible for the -size parameter to hdiutil.

28-Jan-2016 TokenizedString post-functions taking multiple arguments now throw an exception if an incorrect number of arguments are passed.

28-Jan-2016 Fixes #117. TokenizedString post-function, @ifnotempty, added in beta1, has been modified so that the expression is @ifnotempty(pred,a,b). If the expression predicate does not evaluate to an empty string, then the whole expression is replaced with a, otherwise b. In addition, Publisher.CollatedDirectory macros have been normalized so that even renamed directories are clonable by a StrippedBinaryCollation.

27-Jan-2016 Fixes #115. Trying to set the Windows character set in a patch for a subset of a module's source files is not supported in the VSSolution build mode. This is because the setting is project wide. An exception is now thrown if this is encountered. The workaround is to apply the patch to all the source files.

19-Jan-2016 Missing toolchain packages and incorrectly spelt toolchain overrides now report how to fix the problem.

13-Jan-2016 ======== Version 1.0.1b1 Release ========

13-Jan-2016 Fixes #111. DiskImage conversion sometimes fails, as the directory containing the converted .dmg was not created.

13-Jan-2016 Fixes #110. MakeFiles with commands including parentheses that are not Make commands require the parentheses to be escaped for bash.

13-Jan-2016 Fixes #55. Fixing MakeFile generation for GNU objcopy and strip.

12-Jan-2016 Fixes #109. Dynamic library builds no longer performs symlink generation for prebuilts.

12-Jan-2016 Fixes #106. TokenizedString post-function, removetrailingseperator, is misspelt. This function is now deprecated, and will be removed in v1.1.0. Replaced with the correctly spelt, removetrailingseparator.

12-Jan-2016 Fixes #105. Added documentation for the pre- and post-functions available in TokenizedStrings.

12-Jan-2016 Fixes #104. Very wide Native builds were not displaying the output and error streams from external processes launched.

09-Jan-2016 Fixes #94. Overriding the macros 'pluginprefix' and 'pluginext' are now honoured in Xcode and VisualStudio projects. Updated the PluginTest test case to exercise changing these macros.

08-Jan-2016 Fixes #102. Preprocessor defines with quotes specified from the build scripts are now supported consistently across platforms and IDEs in BuildAMation. Added a test case, PreprocessorStringTest1, to exercise these forms. To specify a quoted string as a preprocessor definition within a (private or public) patch, use (settings as ICommonCompilerSettings).PreprocessorDefines.Add("DEFNAME", "\"astring\""); or the TokenizedString function (settings as ICommonCompilerSettings).PreprocessorDefines.Add("DEFNAME", this.CreateTokenizedString("@escapedquotes(apath)"));

06-Jan-2016 Fixes #100. Added CopiedFilename write property to Publisher.CollatedDirectory. If set, the directory is renamed during the copy. Also, Linux/OSX copy functionality has changed from 'cp' to 'bash -c cp' in order for wildcards to be evaluated.

06-Jan-2016 Added TokenizedString post-function, @ifnotempty(a,b). If 'a' is not an empty string, then use it, otherwise use b.

06-Jan-2016 Fixes #99. Xcode pre and post build scripts now escape double quotes.

06-Jan-2016 Added boolean property Bam.Core.TokenizedString.IsAliased, returning true when the TokenizedString is aliased to another.

06-Jan-2016 Fixes #98. Bam.Core.ICommandLineTool has been extended with a read-only property of type TokenizedStringArray, called TerminatingArguments. This pairs with the existing property InitialArguments, which adds arguments directly after the executed. This new property adds arguments after all other arguments. It can be used, for example, to invoke shell commands through bash requiring wildcard expansion, e.g. 'bash -c "cp * dest"', where the quotes around the copy command are required. This new property provides support to add the terminating quotes. Note: due to the change to the interface, any class implementing it will need to include a definition of this property. Note that if a class derives from Bam.Core.PreBuiltTool instead, no changes are necessary, as this class implements the property to return no arguments.

06-Jan-2016 Fixes #97. TokenizedString expressions referencing functions (pre or post) but having mismatched brackets, could result in the .NET regex engine hanging indefinitely. Added a timeout (5 seconds) and throw an exception with details on both the source expression and regex used, in order to diagnose the issue.

06-Jan-2016 Fixes #96. The utility function Bam.Core.Module.MakePlaceholderPath could only be used once per module, due to the caching of similar TokenizedStrings. Undesired behaviour resulted if it was used multiple times, since as soon as any placeholder TokenizedString on that Module was aliased (the whole purpose behind a placeholder), all placeholder strings were aliased. Added a utility function Bam.Core.TokenizedString.CreateUncached, which will always return a unique TokenizedString. Bam.Core.Module.MakePlaceholderPath now uses TokenizedString.CreateUncached.

06-Jan-2016 Added new test, PublishingTest1, which can be used to exercise the features of the Publisher package.

04-Jan-2016 Fixes #95. All Publisher public methods (Include* and ChangeRPath) now return the modules they create, to allow such modules to be ordered through dependencies. Note that IncludeFramework returns an Array<CollatedObject> since it can copy directories, files and symbolic links.

28-Dec-2015 ======== Version 1.0.0 Release ========

14-Dec-2015 Renamed the entry point of package repositories test code, from ConfigureRepository to configure_repository.

09-Dec-2015 Fixes #88. Fixed issue where running 'bam --help --clean' in a package directory would result in an exception when the build root is cleaned.

09-Dec-2015 Fixes #89. Static libraries or header libraries that compile against header libraries now set up module requirements in the graph, so projects actually display those headers. This does not affect the build, as the patches were working previously.

01-Dec-2015 Check first whether a VSProject option already contains a value, before raising an exception if it isn't possible to append.

30-Nov-2015 ======== Version 1.0.0b4 Release ========

30-Nov-2015 Fixes #58. Documented Core assembly, and some of the major packages.

26-Nov-2015 Fixes #85. Added check for mismatching brackets on a TokenizedString function call (pre and post types), e.g. @dir($(0) would previously result in an infinite loop, but will now fail.

26-Nov-2015 Fixes #79. Windows installers default to non-privileged locations (%APPDATA%) for their installation paths.

26-Nov-2015 Fixes #38. VisualStudio and Xcode project files display module source files in a folder hierarchy that mirrors their location beneath their respective package directories.

25-Nov-2015 Fixed #83. Modules with source files with the same basename, but different directories, now compile their object files to unique locations, duplicating the directory structure under their package directory for the full path to their object files. VisualStudio projects use the new object file locations, Xcode builds always built to unique object file locations. MakeFiles share the same directory structure as Native build modes.

24-Nov-2015 Added new TokenizedString post-function, @trimstart(a,b), that removes (multiple) instances of b from the start of a.

24-Nov-2015 Fixes #84. Added Bam.Core.ICommandLineTool.UseResponseFileOption, a string property. This is the option to use on the command line if the tool supports response files in Native build mode. This option is only invoked if the command line length exceeds 32767 characters. Any class implementing this interface will require updating. Bam.Core.PrebuiltTool implements this as a virtual property, with a default of null (response files not supported). VisualC compiler, linker and archiver supports it with the "@" command.

23-Nov-2015 Added new TokenizedString post-function, @escapedquotes(a), which surrounds the argument with \\\". This is useful to use a string as a preprocessor definition.

23-Nov-2015 Issue #83. Default C.ObjectFile path has changed from using the basename of the source file, to the relative path of the source file to the package directory. This means that object file paths now incorporates the folder hierarchy of the source, allowing source files with duplicate basenames to exist in a package. For example, in the DuplicateSourceFilenameTest test.

23-Nov-2015 Added new TokenizedString post-function, @relativeto(a,b), which calculates the relative path of 'a' to 'b'. If the result is 'a', then an exception is thrown, as returning absolute paths may not be ideal if the function is used to compose a path.

23-Nov-2015 Bam.Core.PlatformFilterAttribute and ConfigurationFilterAttribute no longer expose the EPlatform and EConfiguration as properties. Instead an 'Includes' boolean function that accepts an EPlatform or EConfiguration, returning true if the argument is contained within the flags set on the attribute, false otherwise.

23-Nov-2015 Extended the CommandLineProcessor.Processor utility class, so that arbitrary executables can be invoked, without needing to go through the Bam.Core.ITool interface. For example, if a module simply needed to invoke a system command.

23-Nov-2015 Changed the type of Bam.Core.ICommandLineTool.InheritedEnvironmentVariables from System.Collections.Generic.List<string> to Bam.Core.StringArray. Any module implementing this interface will require an update.

23-Nov-2015 Added test, DuplicateSourceFilenameTest, to exercise compiling source files, with the same basename, but different paths in a module.

23-Nov-2015 Fixes #82. Report a useful exception message of why trying to add a dependency (eventually through Bam.Core.FindReferencedModule) will not work in a patch. Instead, this should be done during the invocation of the module's Init function.

21-Nov-2015 ======== Version 1.0.0b3 Release ========

20-Nov-2015 Catch and report exceptions thrown during Settings creation.

20-Nov-2015 Added GccCommon.ICommonCompilerSettings.StrictAliasing and ClangCommon.ICommonCompilerSettings.StrictAliasing, defaulting to false in debug, and true in all configurations with optimizations enabled. See http://dbp-consulting.com/tutorials/StrictAliasing.html for an explanation of aliasing.

20-Nov-2015 Added Publisher.IObjCopyToolSettings.Verbose boolean option to vary the amount of output from the objcopy tool. Defaults to true.

20-Nov-2015 Fixes #75. Mingw binutils 2.25.1 changed behaviour of objcopy, requiring at least the SYSTEMROOT environment variable, or a failure to create a temporary file is reported.

20-Nov-2015 Fixes #74. Only Windows console applications will define the _CONSOLE preprocessor definition.

20-Nov-2015 Fixes #72. C preprocessor definitions that have a value containing a quoted string did not parse correctly in MakeFiles in a bash shell. These values appeared to just require a double quote surrounding them, which also works in Native build modes.

20-Nov-2015 Fixes #76. Added synchronization to VSSolution functions to avoid collections changing in multiple threads concurrently.

19-Nov-2015 Fixes #71. Xcode build settings with multiple values are now serialized as a comma separated list scoped by parentheses. Any escaped characters are enforced in the serialized project files.

19-Nov-2015 Fixes #73. Bam.Core.Settings.Interfaces() now returns all implemented settings interfaces from the Settings instance, ordered by precedence (Bam.Core.SettingsPrecedenceAttribute). This ensures all build modes convert interfaces in a consistent order.

18-Nov-2015 Fixes #70. Added --immediateoutput (-i) command line option the Bam Core. Usually, output is deferred for the Bam.Core.Executor to display (so it is not interleaved during multithreaded builds), but if the process were to stall, then no output would be seen. Using this option displays the output (both stdout and stderr) immediately, useful for diagnosing issues. Default remains deferred output.

18-Nov-2015 Fixes #69. Installer package now exposes a verbosity setting on the DiskImage module, to configure how much output is logged from hdiutil. The options are Default, Quiet, Verbose, Debug, corresponding to the flags (<empty>, '-quiet', '-verbose', '-debug'). Default is the default setting.

18-Nov-2015 Fixes #68. Poll every few seconds for process exit in CommandLineProcessor. Some processes, although ended in the OS, did not return from process.WaitForExit.

18-Nov-2015 Fixes #67. Added C.ICommonLinkerSettings.Bits, which is configured automatically, but allows linkers that must pass options specifying the architecture to do so.

18-Nov-2015 Fixes #64. Added test, MultiBitDepthModuleTest, that illustrates how to build a module in both 32-bit and 64-bit.

18-Nov-2015 Fixes #66. Multiple configuration Xcode builds, with modules that are configuration specific, relating to an application bundle to be created, was throwing an exception, as the metadata to identify an application bundle was being set, and then unset, by the modules on different configurations executed at different times (since the application bundle is treated as a single entity in multiple configurations in the Xcode project).

17-Nov-2015 Fixes #65. Added synchronization to XcodeBuilder, to avoid multiple build threads changing lists simultaneously.

16-Nov-2015 Fixes #60. Collation of OSX Frameworks now optionally changes the install name of the dylib, to be in a standard location for an application bundle, from an optional argument to Publisher.Collation.IncludeFramework. The default value of this argument is false, so this is a change of behaviour to earlier versions of the Publisher package. If frameworks are built with install names, that, say, use an rpath, then their install name does not need changing - instead, a suitable RPath search path should be added to the main executable.

16-Nov-2015 Added ClangCommon.ICommonLinkerSettings.RPath property to all Clang-Xcode* linker settings, to add RPaths to the linked binary. Defaults to being an empty list.

16-Nov-2015 Fixes #59. Changed release process to build the solution with 'xbuild' (equivalent to msbuild) on Mono implementations.

16-Nov-2015 Moved all command line option classes into an 'Options' sub-namespace, to scope them, and simplify what is visible using Intellisense.

16-Nov-2015 Fixes #63. Added command line option, '--viewgraph', to display a representation of the dependency graph of modules on the console.

13-Nov-2015 Fixes #62. Invoking 'bam --showdefinition' on a package outside of a formal repository (i.e. not in a packages or tests folder), threw an exception.

13-Nov-2015 Fixes #61. C/C++ compiler warning levels must appear on the command lines before any warning suppressions. The interfaces containing the warning levels now have a high precedence.

11-Nov-2015 ======== Version 1.0.0b1 (and b2) Release ========

10-Nov-2015 Fixes #30. Added tar settings for compression. Supporting gzip, bzip and lzma.

10-Nov-2014 Added post-function @removetrailingseparator() to TokenizedString, to trim any trailing slashes from paths.

10-Nov-2015 Fixes #4. Added support for Windows resources to be compiled for linking into binaries. Use CreateWinResourceContainer(<path>), similar to normal source files. Support available in Native, MakeFile and VSSolution build modes.

09-Nov-2015 Fixes #17. Fixes #31. Installers now write to configuration specific directories, using names based on their modules. Also, allowed more than one of each type to be created, which was limiting because of their use of another module to generate scripts.

09-Nov-2015 The macro 'OutputName' is now available on all modules. It defaults to the module's name.

09-Nov-2015 Preliminary support for VisualStudio 2015 (Community Edition); see package VisualC-14.0.

09-Nov-2015 Removed Bam.Core.EConfiguration.Final. Existing configurations are debug (full debugging), optimized (no symbols, full optimizations), profile (debug symbols, full optimizations - useful for generating installers while hiving off debug symbols).

09-Nov-2015 Renamed Publisher.Collation.PublishingRoot PathKey to Publisher.Collation.Key (for consistency with other modules).

09-Nov-2015 Added new test, InstallerTest1, to exercise generating installers for all platforms.

09-Nov-2015 Renamed Bam.Core.FileKey to Bam.Core.PathKey, as it is being used for more than just files now.

09-Nov-2015 Updated Bam schema, so that BamAssemblies can use a major, minor, patch attribute, to specify the minimum version supported.

07-Nov-2015 Fixes #52. Nullable fields in Convert functions of settings interfaces are now tested consistently (with .HasValue & .Value properties). Only C compiler interfaces use nullable types, as only these need to calculate common and delta settings.

07-Nov-2015 Fixes #51. Removed legacy Mono package assembly compilation flags.

06-Nov-2015 Fixes #48. Removed Bam.Core.Module argument from CommandLineProcessor.IConvertToCommandLine.Convert, as its use is not always required, and if needed, can be found from the Bam.Core.Settings object on which this interface is applied.

06-Nov-2015 Fixes #49. Added Bam.Core.ConfigurationFilterAttribute, applied to module classes, to indicate whether a module should be built in the current configurations.

06-Nov-2015 Fixes #50. Moved deleting the build root (if the command line specifies it) before package compilation, so that the cached assembly remains on disk after the build. This was stopping the assembly being reused.

06-Nov-2015 Renamed C.ExternalFramework to C.OSXFramework.

06-Nov-2015 Internal expressions referring to the CModule macro 'PatchVersion' (used in semantic versioning with MajorVersion and MinorVersion), now use the pre-function #valid. This is so that thirdparty builds that only support major.minor version numbers can still use Bam modules, by deleting the PatchVersion macro from their modules.

06-Nov-2015 Added pre-function, #valid, which checks whether its expression is valid, i.e. is it a valid expression with valid macro references in the current context. If it is valid, the function call is replaced by its expression. If it is not valid, the function call is removed.

06-Nov-2015 Added 'pre-function' support to Bam.Core.TokenizedStrings, identified by the syntax #<func>(<expression>). The existing function support is for post-evaluation-functions, identified by @<func>(<expression>), i.e. only executed once all tokens have been evaluated. Pre-functions are run prior to token evaluation.

06-Nov-2015 Removed optional flags from Bam.Core.TokenizedString.Create. The deferred expansion flag has been removed. In its place is the concept of an 'inline' TokenizedString, created by invoking Bam.Core.TokenizedString.CreateInline. These inline strings are never parsed themselves, but instead are embedded into strings referring to them during parsing. If Module M1 defines a TokenizedString A that refers by name to an inline TokenizedString B in module M2, then B is allowed to refer, by name, to macros in module M1, as long as M1 and M2 are 'aware' of each other. The best case use of this is where M1 is a C module, and M2 is the Tool associated with M1.

05-Nov-2015 Fixes #39. Publisher package now has a new module StrippedBinaryCollation, only supported in the Native build mode. This works with a Collation module, and a DebugSymbolCollation module, as source, and mirrors the directory structure of the former. On Linux, strip is invoked on each binary, and subsequently objcopy links the stripped binary to the debug symbols generated earlier. On Windows, for binaries with PDBs, a clone of the binary is taken, while without PDBs, strip and objcopy is used. On OSX, strip is invoked on each binary. All non-built files/directories/symlinks are cloned as-is.

05-Nov-2015 Ignore any prebuilt modules from debug symbol collation.

05-Nov-2015 Added C.PrebuiltAttribute, so that modules can be marked up as being already built. This is an attribute on a class, so place it on a module definition. This is useful for detecting cases where modules may not have available data, e.g. debug symbols.

05-Nov-2015 Renamed Bam.Core.Module.ModulePreInitDelegate to Bam.Core.Module.PreInitDelegate, and also made it a generic based on the type of module being created. Any lambda expression used for this delegate now accepts an argument of the real type of the new module, rather than the base class Bam.Core.Module. This avoids any need to cast.

04-Nov-2015 Bam.Core.Settings now has a Module property, set in InitializeAllInterfaces, to the module the Settings instance is associated with. This can be useful to access module paths during get/set property calls in settings interfaces.

04-Nov-2015 VisualC sets the PDB path when debug symbols for the linker are enabled, and records the PDB file as a generated path on the module.

04-Nov-2015 Added TokenizedString function, @changeextension(a, b), which will change the file extension of file 'a', with the extension in 'b'.

04-Nov-2015 Publisher package now has a new module DebugSymbolCollation, only supported in the Native build mode. This accepts a Collation module as source, and mirrors its directory structure. On Linux, objcopy is invoked to copy debugsymbols from the original binary. On OSX, dsymutil is invoked to create a dSYM bundle. On Windows, PDB files are copied if generated (intended for VisualStudio), otherwise objcopy is used (intended for Mingw).

04-Nov-2015 Added macro 'encapsulatingmodulename' to all Modules, once completed.

03-Nov-2015 Added package Clang-Xcode7, targeting SDK 10.11. (Note that Xcode 7 does not include SDK 10.10.)

03-Nov-2015 Renamed Clang-Apple600 package to Clang-Xcode6, targeting SDKs 10.9 and 10.10.

03-Nov-2015 Renamed Clang-Apple503 package to Clang-Xcode5, targeting SDKs 10.8 and 10.9.

03-Nov-2015 Renamed Clang-Apple425 package to Clang-Xcode4, targeting SDKs 10.7 and 10.8.

03-Nov-2015 Fixes #43. The Clang package metadata now exposes a MinimumVersionSupported property, to define the oldest version of MacOSX the build can run on. This defaults to the SDK version if not overridden by the user in a class deriving Bam.Core.IPackageMetaDataConfigure<Clang.MetaData>. This value is used both for compilation and linking. Although these are exposed in compiler and linker settings, this is purely for ease of conversion to command lines.

03-Nov-2015 Added generic function Bam.Core.Graph.PackageMetaData<meta type>(package name) to fetch the meta data instance for the named package, if it exists. This simplifies calling code, and avoids the need for use Linq in that code.

03-Nov-2015 Fixes #44. Clang packages now have metadata with an SDK property (type: string), which is the SDK name to use. The default SDK is used (from 'xcrun --show-sdk-version') if not overridden by the user, using a class deriving Bam.Core.IPackageMetaDataConfigure<Clang.MetaData>. This SDK name is passed to each xcrun command, which is used in turn by each command xcrun executes.

03-Nov-2015 OSX tools from the Xcode developer installation, e.g. clang, install_name_tool, otool, ar, ld, etc, are now executed through the use of 'xcrun'. Currently, the SDK and toolchain used, are as those set by xcode-select. This change allows for future options for using different SDKs and toolchains.

03-Nov-2015 Added property InitialArguments (type: Bam.Core.TokenizedStringArray) to Bam.Core.ICommandLineTool, which is tightly coupled with the Executable property. There are instanced of some tools that are a proxy to others, e.g. on Windows, the cmd executable can take a child executable name to run. When these tools are run, the command line is '<toolname> [<initial args>] <args from settings>'.

03-Nov-2015 Bam.Core.IPackageMetaData is now an abstract class called Bam.Core.PackageMetaData. This is because it now has a protected constructor, which looks for any class derived from Bam.Core.IPackageMetaDataConfigure<package meta data type>, and invokes the Configure method on it. This is to allow user packages to hook into package metadata construction, before the default implementation.

02-Nov-2015 Fixes #37. C builds expose PatchVersion (defaults to zero) in addition to MajorVersion and MinorVersion, so that package builds support semantic versioning. Note on Linux, a symbolic link of <lib>.so.<major>.<minor> is not created, as it does not serve a purpose at either link time or for the dynamic loader.

02-Nov-2015 BuildAMation now uses semantic versioning (semver.org) for its version numbers.

30-Oct-2015 Implemented Evaluate method on Publisher.CollatedSymbolicLink module to only make symbolic links when necessary. This will only execute when the symbolic link does not exist.

30-Oct-2015 Implemented Evaluate method on Publisher.CollatedFile module to only copy files when necessary.

30-Oct-2015 Added GccCommon, ClangCommon and MingwCommon ICommonCompilerSettings property: Visibility. These follow the EVisibility enumeration for the respective module, and default to EVisibility.Hidden. This means that only symbols with __attribute__((visibility("default"))) markup in shared objects will be exported. This is equivalent to the __declspec(dllexport) markup for VisualStudio.

30-Oct-2015 Added GccCommon, ClangCommon and MingwCommon ICommonCompilerSettings properties: AllWarnings, ExtraWarnings and Pedantic. These are boolean properties and default to false.

30-Oct-2015 Added Children property override to C.CModuleContainer, honouring the module type stored within the container. This eliminates the need for useful casts while using the enumeration.

30-Oct-2015 Fixes #41. The checks for whether an object file is up-to-date (evaluation) needed to also check whether the source file will be updated in this build, not just whether the timestamps already vary. This resolves object files not rebuilding when source files are procedurally generated.

30-Oct-2015 Adding an explicit module into a C container, now requires that module to be a C.SourceFile or derived from that. This is beneficial when the source is procedurally generated, as it simplifies the steps required. Also cleaned up the mechanism for creating C.SourceFiles when adding to a container by path.

22-Oct-2015 Fixes #32. Linking in MakeFiles now uses the linker's ProcessLibraryDependency utility function, which in turn will use any required linker switches to handle the different kinds of dependency. For example, -Wl,-rpath-link is used for shared objects that depend on shared objects.

21-Oct-2015 Fixes #35. Added support for Xcode sub-projects, that are needed for order only Target dependencies.

21-Oct-2015 Fixes #36. Renamed 'SharedSettings' extension method on compiler interfaces to 'Intersect'. This now takes the 'common' settings object and one more to intersect with. This means that the common settings are always being involved in the intersection, so that it is now cumulative.

20-Oct-2015 Fixes #34. Updated Xcode project generation so that adding pre build steps for Xcode Targets that have yet to be processed themselves much simpler, but also more rigorous. Follows the design for VisualStudio projects.

18-Oct-2015 Fixes #33. C.ICOnlyCompilerSettings.LanguageStandard now has a default set of c89. Previously this command line switch never appeared on supporting toolchain compilation lines.

17-Oct-2015 Added VisualCCommon.ICommonCompilerSettings.WarningLevel setting. Defaults to Level1 as per the Microsoft documentation.

16-Oct-2015 ======== Version 1.0a5 Release ========

15-Oct-2015 Bam.Core.IBuildModeMetaData now requires implementing the property PublishBesideExecutable. This is because some build modes (i.e. those with IDE projects), should publish binary and data dependencies next to the debuggable executable. Whereas other build modes can publish to a standalone directory.

15-Oct-2015 TokenizedStrings can be aliased to other TokenizedStrings, see the Aliased function(). This enables TokenizedStrings to be referenced externally from point of creation (e.g. as a module generated path), and switched later to another TokenizedString.

15-Oct-2015 Renamed C.ILinkerSettingsWin to C.ICommonLinkerSettingsWin for consistency.

15-Oct-2015 Renamed C.ILinkerSettingsOSX to C.ICommonLinkerSettingsOSX for consistency.

15-Oct-2015 Changed C.ILinkerSettingsOSX.Frameworks from Bam.Core.Array<Bam.Core.TokenizedString> to Bam.Core.TokenizedStringArray.

15-Oct-2015 Changed C.ILinkerSettingsOSX.FrameworkSearchDirectories from Bam.Core.Array<Bam.Core.TokenizedString> to Bam.Core.TokenizedStringArray, and renamed to FrameworkSearchPaths.

15-Oct-2015 Changed C.ICommonCompilerSettingsOSX.FrameworkSearchDirectories from Bam.Core.Array<Bam.Core.TokenizedString> to Bam.Core.TokenizedStringArray, and renamed to FrameworkSearchPaths.

15-Oct-2015 Changed C.ICommonCompilerSettings.IncludePaths from Bam.Core.Array<Bam.Core.TokenizedString> to Bam.Core.TokenizedStringArray.

15-Oct-2015 Changed C.ICommonCompilerSettings.SystemIncludePaths from Bam.Core.Array<Bam.Core.TokenizedString> to Bam.Core.TokenizedStringArray.

15-Oct-2015 Changed C.ICommonLinkerSettings.LibraryPaths from Bam.Core.Array<Bam.Core.TokenizedString> to Bam.Core.TokenizedStringArray.

15-Oct-2015 Changed GccCommon.ICommonLinkerSettings.RPath from Bam.Core.StringArray to Bam.Core.TokenizedStringArray.

15-Oct-2015 Added TokenizedStringArray Add and AddUnique functions that take string arguments - these are converted to verbatim TokenizedStrings.

14-Oct-2015 Debuggable project files are now <modulename>-bam.csproj, to distinguish between those generated for the VSSolution build mode.

14-Oct-2015 Added Publisher.Collation.ChangeRPath utility function, that will alter the RPath for a copied (ELF) file to that path specified. This is so that published files, e.g. plugins, can locate shared objects wherever they may get published to.

14-Oct-2015 Each package representing a build mode (e.g. NativeBuilder) has a class for metadata (named <buildmode>Meta). This must now implement a new interface, Bam.Core.IBuildModeMetaData, which requires a function to return the module output directory TokenizedString used for each module. This allows different build modes to write to different locations under the build root, should their use require it. Most have a module output directory of 'encapsulating module name'/'configuration'.

13-Oct-2015 Added Bam.Core.MacroList.Remove(), with an argument with no token markup. Use this function cautiously, as it can cause TokenizedStrings to fail to parse.

13-Oct-2015 Bam.Core.MacroList.Contains now expects the argument to have no token markup (i.e. no $( prefix and no ) suffix). Note that this is because the macros are internally stored in a format for fast lookups for TokenizedStrings.

13-Oct-2015 Fixes #3. Added macros to C.CModule, MajorVersion (defaults to "1") and MinorVersion (defaults to "0"), but can be overridden in Module's Init functions. Some platforms support writing this data natively into the generated binaries, or including into the filenames.

13-Oct-2015 Bam.Core.TokenizedString.Create now accepts an optional flags parameter. One of these flags is EFlags.DeferredExpansion, which allows macro expansion to be deferred for one level. For example, if a Tool uses a Macro, which is defined in the Module using the tool, this now expands properly.

10-Oct-2015 Added short version of option --createdebugproject, -p.

10-Oct-2015 Renamed FileKey from Publisher.Collation.PackageRoot to Publisher.Collation.PublishingRoot.

09-Oct-2015 Fixes #1. Added function to publish OSX frameworks, IncludeFramework. This requires that the module to be published derives from C.ExternalFramework, and implements the properties indicating which files, directories and symbolic links need to be published from that framework.

09-Oct-2015 Fixes #28. Added support for publishing symbolic links.

08-Oct-2015 Added Bam.Core.MacroList.AddVerbatim.

08-Oct-2015 Fixes #26. Added command line option, --stats, which displays memory, object count, and timing information at the end of a build.

07-Oct-2015 Removed verbatim optional argument to Bam.Core.TokenizedString.Create. Use CreateVerbatim instead.

07-Oct-2015 Added Bam.Core.TokenizedString.CreateVerbatim utility function, for strings that require no parsing.

07-Oct-2015 Fixes #25. Nested function calls in TokenizedStrings are now supported.

07-Oct-2015 Bam.Core.TokenizedString now understands the @normalize(<path>) function, returning the full normalized path of the argument.

06-Oct-2015 Fixes #24. Added function to publish whole directories, IncludeDirectory() on the Collation object.

06-Oct-2015 Fixes #23. Fixed the regular expression tokenizing a string for functions, when multiple functions are present.

06-Oct-2015 Bam.Core.TokenizedString.Create will return null if the format string passed in is null. To create an empty tokenized string, use string.Empty, or Bam.Core.Module.MakePlaceholderPath.

06-Oct-2015 Bam.Core.TokenizedString now understands the @dir(<path>) function, returning the parent directory of the argument.

06-Oct-2015 C.ObjectFile no longer defines an inputpath macro, for interaction with the corresponding source file. Instead, the source file's TokenizedString path is referenced directly, via positional tokens.

06-Oct-2015 Bam.Core.Module now has a utility function to create TokenizedStrings that reference macros in that module, CreateTokenizedString. Also, a new function, MakePlaceholderPath(), which is a TokenizedString on the module intended for replacement at a later time (e.g. create a module empty, then set the source path). This is so that other modules can reference this placeholder before the path is set.

06-Oct-2015 Fixes #22. TokenizedString creation now accepts an optional list of TokenizedStrings. This is to allow references to strings other than those in macro lists, e.g. source/output paths of modules. These are referred to as positional tokens, and may be referenced by a zero-based numeric index as a token (usual token notation), e.g. "$(0)" refers to the first string in that list.

03-Oct-2015 Fixes #21. Each file published is now a separate module, which enables both parallelism and that tools can be assigned to each published object.

03-Oct-2015 Running command line tools no longer leaves the standard input stream open. This avoids tools that request user input from indefinitely pausing the build - instead they will fail because there will never be any input.

03-Oct-2015 Fixes #20. Exceptions thrown during a threaded build are now displayed with full details and stack trace to the user.

03-Oct-2015 Fixes #19. Bam executed with -d/--debug did not use debug symbols in Mono.

02-Oct-2015 Added VisualCCommon.IRuntimeLibraryPathMeta interface, implemented by VisualC.MetaData class, to return the paths for the C and C++ runtime libraries for the version of VisualC. 32 or 64-bit versions are requested by the argument to the interface functions, MSVCR (C runtime) and MSVCP (C++ runtime).

02-Oct-2015 Fixes #18. Added Publisher.Collation.IncludeFile function(s), so that files not associated with modules can be published.

02-Oct-2015 Added Bam.Core.TokenizedString.ParseAndQuoteIfNecessary. If the parsed string contains a space, the returned string from this function is wrapped in (double) quotes. Otherwise, the parsed string is returned.

02-Oct-2015 Fixes #15. Environment variables can now be used in TokenizedStrings. For example, a tokenized string can be "$(HOME)" to get the HOME environment variable.

02-Oct-2015 Fixes #16. VisualC builds in Native build mode no longer default to statically linking the CRT, which was different to VSSolution build modes (dynamically linking the CRT). The default is now to dynamically link (to reduce binary size) against the non-debug CRT. This can be changed on the VisualCCommon.ICommonCompilerSettings.RuntimeLibrary property.

25-Sep-2015 ======== Version 1.0a4 Release ========

25-Sep-2015 Fixes #12. To compiler, archiver and linker settings, added a new interface C.IAdditionalSettings, which allows a back door to setting arbitrary tool options, in the event of an existing interface not exposing the necessary property. This simply avoids having to modify packages to add a command line switch. VisualStudio and Xcode support provided. But note that Xcode does not expose any visible custom archiver setting.

25-Sep-2015 Fixes #11. C.ConsoleApplication and C.GuiApplication and C.DynamicLibrary allowed the creation of C++ source containers through class methods. These methods have been moved to the equivalent C.Cxx module types.

24-Sep-2015 Fixes #10. Do not assume that gcc, g++, ar, and ld, all reside on the same path. For instance, Gcc-4.8 on CentOS 6 is installed to /opt/rh/devtoolset-2, while ar and ld reside in /usr/bin.

23-Sep-2015 Fixes #9. Each conversion package (CommandLineProcessor, VisualStudioProcessor, XcodeProjectProcessor) now uses Bam.Core.Settings.Interfaces(), and reflection, to invoke each settings interface on a Settings object. Fetching the interfaces through reflection does not guarantee an order, so the precedence of interfaces are queried through Bam.Core.SettingsPrecedenceAttribute. C.ICommonArchiverSettings has a very negative precedence, as some librarians (ar) require the output file to be specified as the last argument before all input files.

23-Sep-2015 Issue #9. Added Bam.Core.SettingsPrecedenceAttribute, applicable to interfaces, that takes an integer value to define an order of evaluation. This is in respect of Settings interfaces (implement Bam.Core.ISettingsBase). By default, precedence is zero. A more negative value indicates that the interface is processed later, while a more positive value indicates that the interface is processed earlier.

23-Sep-2015 Issue #9. Added Bam.Core.Settings.Interfaces() that returns an IEnumerable returning the interfaces on the Settings object.

21-Sep-2015 ======== Version 1.0a3 Release ========

21-Sep-2015 Fixes #8. PATH is now searched for gcc, and versions checked, rather than assuming installation directories, and naming conventions.

21-Sep-2015 Check whether a C source directory exists before enumerating it for files.

21-Sep-2015 Fixes #6. Wrapped Module creation in a try catch, which will throw a new exception type, Bam.Core.ModuleCreationException, capturing the module type in the inner most module creation call, so that accurate module information can be provided when reporting the error.

21-Sep-2015 First check whether a package repository exists before enumerating it for packages.

21-Sep-2015 Fixes #7. Unhandled exceptions fell through the bam executable. Now catch and report them, for a cleaner exit.

19-Sep-2015 Fixes #2. The Bam test harness can now specify other package repositories to test, as well as the default in Bam. There is a requirement of a bamtests.py in the tests folder of each repository, naming each valid Test, and the build modes in which it can be run.

18-Sep-2015 bam --version now reports the directory containing the Bam core assembly.

18-Sep-2015 Dependent package definition files did not add their package repositories into the search paths, in order to resolve all packages they reference.

18-Sep-2015 ======== Version 1.0a2 Release ========

18-Sep-2015 C.ConsoleApplication.RequiredToExist<T> now accepts a comma separated list of modules to apply public patches of T to. This is used, for instance, for plugins that do not need to be linked against an application, but do expose a header to compile against.

18-Sep-2015 Public patches on a module are now inherited by all modules that reside within it. For example, a C static library has a public patch to provide an include path; all source containers within that static library automatically use that patch.

17-Sep-2015 ======== Version 1.0a1 Release ========

16-Sep-2015 Next target version set to 1.0.
