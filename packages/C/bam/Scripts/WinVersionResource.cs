#region License
// Copyright (c) 2010-2017, Mark Final
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * Neither the name of BuildAMation nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#endregion // License
namespace C
{
    /// <summary>
    /// Windows binary version resource file
    /// </summary>
    public class WinVersionResource :
        SourceFile
    {
        protected override void
        Init(
            Bam.Core.Module parent)
        {
            base.Init(parent);
        }

        public ConsoleApplication BinaryModule
        {
            get;
            set;
        }

        protected override void
        ExecuteInternal(
            Bam.Core.ExecutionContext context)
        {
            base.ExecuteInternal(context);

            var rcPath = this.InputPath.ToString();
            if (!System.IO.Directory.Exists(System.IO.Path.GetDirectoryName(rcPath)))
            {
                System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(rcPath));
            }

            var binaryModule = this.BinaryModule;
            var binaryMajorVersion = binaryModule.Macros["MajorVersion"].ToString();
            var getMinorVersion = binaryModule.CreateTokenizedString("#valid($(MinorVersion),0)");
            getMinorVersion.Parse();
            var binaryMinorVersion = getMinorVersion.ToString();
            var getPatchVersion = binaryModule.CreateTokenizedString("#valid($(PatchVersion),0)");
            getPatchVersion.Parse();
            var binaryPatchVersion = getPatchVersion.ToString();

            var productDefinition = Bam.Core.Graph.Instance.ProductDefinition;

            using (System.IO.TextWriter writer = new System.IO.StreamWriter(rcPath))
            {
                writer.WriteLine("// Version resource for {0}, automatically generated by BuildAMation", binaryModule.Macros["modulename"].ToString());
                writer.WriteLine("#include \"winver.h\"");
                writer.WriteLine("VS_VERSION_INFO VERSIONINFO");
                // note that these are comma separated
                writer.WriteLine("FILEVERSION {0},{1},{2}", binaryMajorVersion, binaryMinorVersion, binaryPatchVersion);
                if (null != productDefinition)
                {
                    writer.WriteLine("PRODUCTVERSION {0},{1},{2}",
                        productDefinition.MajorVersion.HasValue ? productDefinition.MajorVersion.Value : 0,
                        productDefinition.MinorVersion.HasValue ? productDefinition.MinorVersion.Value : 0,
                        productDefinition.PatchVersion.HasValue ? productDefinition.PatchVersion.Value : 0);
                }
                writer.WriteLine("FILEFLAGSMASK VS_FFI_FILEFLAGSMASK");
                string flags = "";
                if (this.BuildEnvironment.Configuration == Bam.Core.EConfiguration.Debug)
                {
                    if (flags.Length > 0)
                    {
                        flags += "|";
                    }
                    flags += "VS_FF_DEBUG";
                }
                if (null != productDefinition)
                {
                    if (productDefinition.IsPrerelease)
                    {
                        if (flags.Length > 0)
                        {
                            flags += "|";
                        }
                        flags += "VS_FF_PRERELEASE";
                    }
                }
                if (!string.IsNullOrEmpty(flags))
                {
                    writer.WriteLine("FILEFLAGS ({0})", flags);
                }
                writer.WriteLine("FILEOS VOS_NT_WINDOWS32"); // TODO: is there a 64-bit?
                if (binaryModule is DynamicLibrary || binaryModule is Cxx.DynamicLibrary)
                {
                    writer.WriteLine("FILETYPE VFT_DLL");
                }
                else
                {
                    writer.WriteLine("FILETYPE VFT_APP");
                }

                // use the current machine's configuration to determine the default
                // language,codepage pair supported by the binary
                var culture = System.Globalization.CultureInfo.CurrentCulture;
                var codepage = System.Text.Encoding.Default.WindowsCodePage;

                writer.WriteLine("FILESUBTYPE VFT2_UNKNOWN");
                writer.WriteLine("BEGIN");
                writer.WriteLine("\tBLOCK \"StringFileInfo\"");
                writer.WriteLine("\tBEGIN");
                writer.WriteLine("\t\tBLOCK \"{0:X4}{1:X4}\"", culture.LCID, codepage);
                writer.WriteLine("\t\tBEGIN");
                var fileDescription = binaryModule.CreateTokenizedString("#valid($(Description),$(modulename))");
                fileDescription.Parse();
                writer.WriteLine("\t\t\tVALUE \"FileDescription\", \"{0}\"", fileDescription.ToString());
                writer.WriteLine("\t\t\tVALUE \"FileVersion\", \"{0}.{1}.{2}\"", binaryMajorVersion, binaryMinorVersion, binaryPatchVersion);
                writer.WriteLine("\t\t\tVALUE \"InternalName\", \"{0}\"", binaryModule.Macros["modulename"].ToString());
                writer.WriteLine("\t\t\tVALUE \"OriginalFilename\", \"{0}\"", System.IO.Path.GetFileName(binaryModule.GeneratedPaths[ConsoleApplication.Key].ToString()));
                if (null != productDefinition)
                {
                    writer.WriteLine("\t\t\tVALUE \"ProductName\", \"{0}\"", productDefinition.Name);
                    writer.WriteLine("\t\t\tVALUE \"ProductVersion\", \"{0}.{1}.{2}\"",
                        productDefinition.MajorVersion.HasValue ? productDefinition.MajorVersion.Value : 0,
                        productDefinition.MinorVersion.HasValue ? productDefinition.MinorVersion.Value : 0,
                        productDefinition.PatchVersion.HasValue ? productDefinition.PatchVersion.Value : 0);
                    writer.WriteLine("\t\t\tVALUE \"LegalCopyright\", \"{0}\"", productDefinition.CopyrightNotice);
                    writer.WriteLine("\t\t\tVALUE \"CompanyName\", \"{0}\"", productDefinition.CompanyName);
                }
                writer.WriteLine("\t\tEND");
                writer.WriteLine("\tEND");
                writer.WriteLine("\tBLOCK \"VarFileInfo\"");
                writer.WriteLine("\tBEGIN");
                writer.WriteLine("\t\tVALUE \"Translation\", 0x{0:X4}, {1}", culture.LCID, codepage);
                writer.WriteLine("\tEND");
                writer.WriteLine("END");
            }
        }

        public override void Evaluate()
        {
            this.ReasonToExecute = null;
            var outputPath = this.GeneratedPaths[Key].ToString();
            if (!System.IO.File.Exists(outputPath))
            {
                this.ReasonToExecute = Bam.Core.ExecuteReasoning.FileDoesNotExist(this.GeneratedPaths[Key]);
            }
        }
    }
}
